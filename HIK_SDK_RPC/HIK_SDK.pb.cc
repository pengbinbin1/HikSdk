// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HIK_SDK.proto

#include "HIK_SDK.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_HIK_5fSDK_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_HIK_5fSDK_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_HIK_5fSDK_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Time;
}  // namespace protobuf_HIK_5fSDK_2eproto
namespace HIK_SDK_P {
class LoginInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginInfo>
      _instance;
} _LoginInfo_default_instance_;
class ConfParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConfParam>
      _instance;
} _ConfParam_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo>
      _instance;
} _DeviceInfo_default_instance_;
class DeviceListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceList>
      _instance;
} _DeviceList_default_instance_;
class EmptyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Empty>
      _instance;
} _Empty_default_instance_;
class TimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Time>
      _instance;
} _Time_default_instance_;
class SaveFileParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SaveFileParam>
      _instance;
} _SaveFileParam_default_instance_;
class SaveFileParam1DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SaveFileParam1>
      _instance;
} _SaveFileParam1_default_instance_;
class FileDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileData>
      _instance;
} _FileData_default_instance_;
class FindFileParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FindFileParam>
      _instance;
} _FindFileParam_default_instance_;
class ErrCodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ErrCode>
      _instance;
} _ErrCode_default_instance_;
}  // namespace HIK_SDK_P
namespace protobuf_HIK_5fSDK_2eproto {
static void InitDefaultsLoginInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_LoginInfo_default_instance_;
    new (ptr) ::HIK_SDK_P::LoginInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::LoginInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginInfo}, {}};

static void InitDefaultsConfParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_ConfParam_default_instance_;
    new (ptr) ::HIK_SDK_P::ConfParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::ConfParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConfParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfParam}, {}};

static void InitDefaultsDeviceInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_DeviceInfo_default_instance_;
    new (ptr) ::HIK_SDK_P::DeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::DeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceInfo}, {}};

static void InitDefaultsDeviceList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_DeviceList_default_instance_;
    new (ptr) ::HIK_SDK_P::DeviceList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::DeviceList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeviceList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeviceList}, {
      &protobuf_HIK_5fSDK_2eproto::scc_info_DeviceInfo.base,}};

static void InitDefaultsEmpty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_Empty_default_instance_;
    new (ptr) ::HIK_SDK_P::Empty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::Empty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Empty =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmpty}, {}};

static void InitDefaultsTime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_Time_default_instance_;
    new (ptr) ::HIK_SDK_P::Time();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::Time::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Time =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTime}, {}};

static void InitDefaultsSaveFileParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_SaveFileParam_default_instance_;
    new (ptr) ::HIK_SDK_P::SaveFileParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::SaveFileParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SaveFileParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSaveFileParam}, {
      &protobuf_HIK_5fSDK_2eproto::scc_info_Time.base,}};

static void InitDefaultsSaveFileParam1() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_SaveFileParam1_default_instance_;
    new (ptr) ::HIK_SDK_P::SaveFileParam1();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::SaveFileParam1::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SaveFileParam1 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSaveFileParam1}, {}};

static void InitDefaultsFileData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_FileData_default_instance_;
    new (ptr) ::HIK_SDK_P::FileData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::FileData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FileData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFileData}, {
      &protobuf_HIK_5fSDK_2eproto::scc_info_Time.base,}};

static void InitDefaultsFindFileParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_FindFileParam_default_instance_;
    new (ptr) ::HIK_SDK_P::FindFileParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::FindFileParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FindFileParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFindFileParam}, {
      &protobuf_HIK_5fSDK_2eproto::scc_info_Time.base,}};

static void InitDefaultsErrCode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HIK_SDK_P::_ErrCode_default_instance_;
    new (ptr) ::HIK_SDK_P::ErrCode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HIK_SDK_P::ErrCode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ErrCode =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsErrCode}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LoginInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConfParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Empty.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Time.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SaveFileParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SaveFileParam1.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FindFileParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ErrCode.base);
}

::google::protobuf::Metadata file_level_metadata[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::LoginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::LoginInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::LoginInfo, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::LoginInfo, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::LoginInfo, passwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::LoginInfo, useasynlogin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::ConfParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::ConfParam, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::ConfParam, group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::DeviceInfo, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::DeviceInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::DeviceInfo, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::DeviceInfo, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::DeviceInfo, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::DeviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::DeviceList, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::DeviceList, devicelists_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::Time, dwyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::Time, dwmonth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::Time, dwday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::Time, dwhour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::Time, dwminute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::Time, dwsecond_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::SaveFileParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::SaveFileParam, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::SaveFileParam, stoptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::SaveFileParam, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::SaveFileParam, filename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::SaveFileParam1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::SaveFileParam1, nvrfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::SaveFileParam1, desfile_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::FileData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::FileData, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::FileData, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::FileData, stoptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::FileData, filesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::FileData, err_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::FindFileParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::FindFileParam, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::FindFileParam, stoptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::FindFileParam, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::ErrCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HIK_SDK_P::ErrCode, errcode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::HIK_SDK_P::LoginInfo)},
  { 10, -1, sizeof(::HIK_SDK_P::ConfParam)},
  { 17, -1, sizeof(::HIK_SDK_P::DeviceInfo)},
  { 27, -1, sizeof(::HIK_SDK_P::DeviceList)},
  { 34, -1, sizeof(::HIK_SDK_P::Empty)},
  { 39, -1, sizeof(::HIK_SDK_P::Time)},
  { 50, -1, sizeof(::HIK_SDK_P::SaveFileParam)},
  { 59, -1, sizeof(::HIK_SDK_P::SaveFileParam1)},
  { 66, -1, sizeof(::HIK_SDK_P::FileData)},
  { 76, -1, sizeof(::HIK_SDK_P::FindFileParam)},
  { 84, -1, sizeof(::HIK_SDK_P::ErrCode)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_LoginInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_ConfParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_DeviceList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_Empty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_Time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_SaveFileParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_SaveFileParam1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_FileData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_FindFileParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HIK_SDK_P::_ErrCode_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "HIK_SDK.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rHIK_SDK.proto\022\tHIK_SDK_P\"Y\n\tLoginInfo\022"
      "\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\014\n\004user\030\003 \001(\t\022"
      "\016\n\006passwd\030\004 \001(\t\022\024\n\014useAsynLogin\030\005 \001(\010\"+\n"
      "\tConfParam\022\017\n\007command\030\001 \001(\005\022\r\n\005group\030\002 \001"
      "(\005\"W\n\nDeviceInfo\022\017\n\007channel\030\001 \001(\005\022\n\n\002ip\030"
      "\002 \001(\t\022\014\n\004port\030\003 \001(\r\022\014\n\004user\030\004 \001(\t\022\020\n\010pas"
      "sword\030\005 \001(\t\"E\n\nDeviceList\022\013\n\003err\030\001 \001(\005\022*"
      "\n\013DeviceLists\030\002 \003(\0132\025.HIK_SDK_P.DeviceIn"
      "fo\"\007\n\005Empty\"j\n\004Time\022\016\n\006dwYear\030\001 \001(\004\022\017\n\007d"
      "wMonth\030\002 \001(\004\022\r\n\005dwDay\030\003 \001(\004\022\016\n\006dwHour\030\004 "
      "\001(\004\022\020\n\010dwMinute\030\005 \001(\004\022\020\n\010dwSecond\030\006 \001(\004\""
      "y\n\rSaveFileParam\022\"\n\tstarttime\030\001 \001(\0132\017.HI"
      "K_SDK_P.Time\022!\n\010stoptime\030\002 \001(\0132\017.HIK_SDK"
      "_P.Time\022\017\n\007channel\030\003 \001(\003\022\020\n\010filename\030\004 \001"
      "(\t\"2\n\016SaveFileParam1\022\017\n\007nvrfile\030\001 \001(\t\022\017\n"
      "\007desfile\030\002 \001(\t\"\202\001\n\010FileData\022\020\n\010filename\030"
      "\001 \001(\t\022\"\n\tstarttime\030\002 \001(\0132\017.HIK_SDK_P.Tim"
      "e\022!\n\010stoptime\030\003 \001(\0132\017.HIK_SDK_P.Time\022\020\n\010"
      "filesize\030\004 \001(\003\022\013\n\003err\030\005 \001(\005\"g\n\rFindFileP"
      "aram\022\"\n\tstarttime\030\001 \001(\0132\017.HIK_SDK_P.Time"
      "\022!\n\010stoptime\030\002 \001(\0132\017.HIK_SDK_P.Time\022\017\n\007c"
      "hannel\030\003 \001(\004\"\032\n\007ErrCode\022\017\n\007errcode\030\001 \001(\005"
      "2\365\002\n\006HIKSDK\0222\n\004Init\022\024.HIK_SDK_P.LoginInf"
      "o\032\022.HIK_SDK_P.ErrCode\"\000\0220\n\006Uninit\022\020.HIK_"
      "SDK_P.Empty\032\022.HIK_SDK_P.ErrCode\"\000\022@\n\016Sav"
      "eFileByTime\022\030.HIK_SDK_P.SaveFileParam\032\022."
      "HIK_SDK_P.ErrCode\"\000\022A\n\016SaveFileByName\022\031."
      "HIK_SDK_P.SaveFileParam1\032\022.HIK_SDK_P.Err"
      "Code\"\000\022A\n\016FindFileByTime\022\030.HIK_SDK_P.Fin"
      "dFileParam\032\023.HIK_SDK_P.FileData\"\000\022=\n\014Get"
      "DVRConfig\022\024.HIK_SDK_P.ConfParam\032\025.HIK_SD"
      "K_P.DeviceList\"\000B \n\016io.grpc.HIKSDKB\006HIKS"
      "DKP\001\242\002\003HLWb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HIK_SDK.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_HIK_5fSDK_2eproto
namespace HIK_SDK_P {

// ===================================================================

void LoginInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginInfo::kIpFieldNumber;
const int LoginInfo::kPortFieldNumber;
const int LoginInfo::kUserFieldNumber;
const int LoginInfo::kPasswdFieldNumber;
const int LoginInfo::kUseAsynLoginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginInfo::LoginInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_LoginInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.LoginInfo)
}
LoginInfo::LoginInfo(const LoginInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.passwd().size() > 0) {
    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&useasynlogin_) -
    reinterpret_cast<char*>(&port_)) + sizeof(useasynlogin_));
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.LoginInfo)
}

void LoginInfo::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&useasynlogin_) -
      reinterpret_cast<char*>(&port_)) + sizeof(useasynlogin_));
}

LoginInfo::~LoginInfo() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.LoginInfo)
  SharedDtor();
}

void LoginInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginInfo::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginInfo& LoginInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_LoginInfo.base);
  return *internal_default_instance();
}


void LoginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.LoginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&useasynlogin_) -
      reinterpret_cast<char*>(&port_)) + sizeof(useasynlogin_));
  _internal_metadata_.Clear();
}

bool LoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.LoginInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HIK_SDK_P.LoginInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HIK_SDK_P.LoginInfo.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string passwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), static_cast<int>(this->passwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HIK_SDK_P.LoginInfo.passwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool useAsynLogin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useasynlogin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.LoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.LoginInfo)
  return false;
#undef DO_
}

void LoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.LoginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.LoginInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // string user = 3;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.LoginInfo.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user(), output);
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.LoginInfo.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->passwd(), output);
  }

  // bool useAsynLogin = 5;
  if (this->useasynlogin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->useasynlogin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.LoginInfo)
}

::google::protobuf::uint8* LoginInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.LoginInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.LoginInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // string user = 3;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.LoginInfo.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), static_cast<int>(this->passwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.LoginInfo.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }

  // bool useAsynLogin = 5;
  if (this->useasynlogin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->useasynlogin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.LoginInfo)
  return target;
}

size_t LoginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.LoginInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string user = 3;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // string passwd = 4;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // bool useAsynLogin = 5;
  if (this->useasynlogin() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.LoginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.LoginInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.LoginInfo)
    MergeFrom(*source);
  }
}

void LoginInfo::MergeFrom(const LoginInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.LoginInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.useasynlogin() != 0) {
    set_useasynlogin(from.useasynlogin());
  }
}

void LoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.LoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.LoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {
  return true;
}

void LoginInfo::Swap(LoginInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginInfo::InternalSwap(LoginInfo* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passwd_.Swap(&other->passwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(useasynlogin_, other->useasynlogin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginInfo::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConfParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfParam::kCommandFieldNumber;
const int ConfParam::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfParam::ConfParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_ConfParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.ConfParam)
}
ConfParam::ConfParam(const ConfParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_) -
    reinterpret_cast<char*>(&command_)) + sizeof(group_));
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.ConfParam)
}

void ConfParam::SharedCtor() {
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_) -
      reinterpret_cast<char*>(&command_)) + sizeof(group_));
}

ConfParam::~ConfParam() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.ConfParam)
  SharedDtor();
}

void ConfParam::SharedDtor() {
}

void ConfParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConfParam::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfParam& ConfParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_ConfParam.base);
  return *internal_default_instance();
}


void ConfParam::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.ConfParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_) -
      reinterpret_cast<char*>(&command_)) + sizeof(group_));
  _internal_metadata_.Clear();
}

bool ConfParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.ConfParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.ConfParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.ConfParam)
  return false;
#undef DO_
}

void ConfParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.ConfParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // int32 group = 2;
  if (this->group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.ConfParam)
}

::google::protobuf::uint8* ConfParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.ConfParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // int32 group = 2;
  if (this->group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.ConfParam)
  return target;
}

size_t ConfParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.ConfParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }

  // int32 group = 2;
  if (this->group() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->group());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.ConfParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.ConfParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.ConfParam)
    MergeFrom(*source);
  }
}

void ConfParam::MergeFrom(const ConfParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.ConfParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.group() != 0) {
    set_group(from.group());
  }
}

void ConfParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.ConfParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfParam::CopyFrom(const ConfParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.ConfParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfParam::IsInitialized() const {
  return true;
}

void ConfParam::Swap(ConfParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfParam::InternalSwap(ConfParam* other) {
  using std::swap;
  swap(command_, other->command_);
  swap(group_, other->group_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConfParam::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kChannelFieldNumber;
const int DeviceInfo::kIpFieldNumber;
const int DeviceInfo::kPortFieldNumber;
const int DeviceInfo::kUserFieldNumber;
const int DeviceInfo::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_DeviceInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(port_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceInfo& DeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_DeviceInfo.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.DeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HIK_SDK_P.DeviceInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HIK_SDK_P.DeviceInfo.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HIK_SDK_P.DeviceInfo.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.DeviceInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // string user = 4;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.DeviceInfo.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user(), output);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.DeviceInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.DeviceInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // string user = 4;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.DeviceInfo.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.DeviceInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.DeviceInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string user = 4;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // string password = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // int32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeviceList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceList::kErrFieldNumber;
const int DeviceList::kDeviceListsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceList::DeviceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_DeviceList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.DeviceList)
}
DeviceList::DeviceList(const DeviceList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      devicelists_(from.devicelists_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.DeviceList)
}

void DeviceList::SharedCtor() {
  err_ = 0;
}

DeviceList::~DeviceList() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.DeviceList)
  SharedDtor();
}

void DeviceList::SharedDtor() {
}

void DeviceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeviceList::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceList& DeviceList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_DeviceList.base);
  return *internal_default_instance();
}


void DeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.DeviceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devicelists_.Clear();
  err_ = 0;
  _internal_metadata_.Clear();
}

bool DeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.DeviceList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 err = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .HIK_SDK_P.DeviceInfo DeviceLists = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_devicelists()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.DeviceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.DeviceList)
  return false;
#undef DO_
}

void DeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.DeviceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->err() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // repeated .HIK_SDK_P.DeviceInfo DeviceLists = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devicelists_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->devicelists(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.DeviceList)
}

::google::protobuf::uint8* DeviceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.DeviceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->err() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // repeated .HIK_SDK_P.DeviceInfo DeviceLists = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devicelists_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->devicelists(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.DeviceList)
  return target;
}

size_t DeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.DeviceList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .HIK_SDK_P.DeviceInfo DeviceLists = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->devicelists_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->devicelists(static_cast<int>(i)));
    }
  }

  // int32 err = 1;
  if (this->err() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.DeviceList)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.DeviceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.DeviceList)
    MergeFrom(*source);
  }
}

void DeviceList::MergeFrom(const DeviceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.DeviceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devicelists_.MergeFrom(from.devicelists_);
  if (from.err() != 0) {
    set_err(from.err());
  }
}

void DeviceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.DeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceList::CopyFrom(const DeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.DeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceList::IsInitialized() const {
  return true;
}

void DeviceList::Swap(DeviceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceList::InternalSwap(DeviceList* other) {
  using std::swap;
  CastToBase(&devicelists_)->InternalSwap(CastToBase(&other->devicelists_));
  swap(err_, other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeviceList::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Empty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_Empty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Empty& Empty::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_Empty.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.Empty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.Empty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Time::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kDwYearFieldNumber;
const int Time::kDwMonthFieldNumber;
const int Time::kDwDayFieldNumber;
const int Time::kDwHourFieldNumber;
const int Time::kDwMinuteFieldNumber;
const int Time::kDwSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_Time.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.Time)
}
Time::Time(const Time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dwyear_, &from.dwyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&dwsecond_) -
    reinterpret_cast<char*>(&dwyear_)) + sizeof(dwsecond_));
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.Time)
}

void Time::SharedCtor() {
  ::memset(&dwyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dwsecond_) -
      reinterpret_cast<char*>(&dwyear_)) + sizeof(dwsecond_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.Time)
  SharedDtor();
}

void Time::SharedDtor() {
}

void Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Time& Time::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_Time.base);
  return *internal_default_instance();
}


void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dwyear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dwsecond_) -
      reinterpret_cast<char*>(&dwyear_)) + sizeof(dwsecond_));
  _internal_metadata_.Clear();
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.Time)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 dwYear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwMonth = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwmonth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwDay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwday_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwHour = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwhour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwMinute = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwminute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dwSecond = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dwYear = 1;
  if (this->dwyear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dwyear(), output);
  }

  // uint64 dwMonth = 2;
  if (this->dwmonth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dwmonth(), output);
  }

  // uint64 dwDay = 3;
  if (this->dwday() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dwday(), output);
  }

  // uint64 dwHour = 4;
  if (this->dwhour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dwhour(), output);
  }

  // uint64 dwMinute = 5;
  if (this->dwminute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dwminute(), output);
  }

  // uint64 dwSecond = 6;
  if (this->dwsecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->dwsecond(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dwYear = 1;
  if (this->dwyear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dwyear(), target);
  }

  // uint64 dwMonth = 2;
  if (this->dwmonth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dwmonth(), target);
  }

  // uint64 dwDay = 3;
  if (this->dwday() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dwday(), target);
  }

  // uint64 dwHour = 4;
  if (this->dwhour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dwhour(), target);
  }

  // uint64 dwMinute = 5;
  if (this->dwminute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dwminute(), target);
  }

  // uint64 dwSecond = 6;
  if (this->dwsecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->dwsecond(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.Time)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 dwYear = 1;
  if (this->dwyear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwyear());
  }

  // uint64 dwMonth = 2;
  if (this->dwmonth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwmonth());
  }

  // uint64 dwDay = 3;
  if (this->dwday() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwday());
  }

  // uint64 dwHour = 4;
  if (this->dwhour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwhour());
  }

  // uint64 dwMinute = 5;
  if (this->dwminute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwminute());
  }

  // uint64 dwSecond = 6;
  if (this->dwsecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dwsecond());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dwyear() != 0) {
    set_dwyear(from.dwyear());
  }
  if (from.dwmonth() != 0) {
    set_dwmonth(from.dwmonth());
  }
  if (from.dwday() != 0) {
    set_dwday(from.dwday());
  }
  if (from.dwhour() != 0) {
    set_dwhour(from.dwhour());
  }
  if (from.dwminute() != 0) {
    set_dwminute(from.dwminute());
  }
  if (from.dwsecond() != 0) {
    set_dwsecond(from.dwsecond());
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  using std::swap;
  swap(dwyear_, other->dwyear_);
  swap(dwmonth_, other->dwmonth_);
  swap(dwday_, other->dwday_);
  swap(dwhour_, other->dwhour_);
  swap(dwminute_, other->dwminute_);
  swap(dwsecond_, other->dwsecond_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SaveFileParam::InitAsDefaultInstance() {
  ::HIK_SDK_P::_SaveFileParam_default_instance_._instance.get_mutable()->starttime_ = const_cast< ::HIK_SDK_P::Time*>(
      ::HIK_SDK_P::Time::internal_default_instance());
  ::HIK_SDK_P::_SaveFileParam_default_instance_._instance.get_mutable()->stoptime_ = const_cast< ::HIK_SDK_P::Time*>(
      ::HIK_SDK_P::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SaveFileParam::kStarttimeFieldNumber;
const int SaveFileParam::kStoptimeFieldNumber;
const int SaveFileParam::kChannelFieldNumber;
const int SaveFileParam::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SaveFileParam::SaveFileParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_SaveFileParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.SaveFileParam)
}
SaveFileParam::SaveFileParam(const SaveFileParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_starttime()) {
    starttime_ = new ::HIK_SDK_P::Time(*from.starttime_);
  } else {
    starttime_ = NULL;
  }
  if (from.has_stoptime()) {
    stoptime_ = new ::HIK_SDK_P::Time(*from.stoptime_);
  } else {
    stoptime_ = NULL;
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.SaveFileParam)
}

void SaveFileParam::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(channel_));
}

SaveFileParam::~SaveFileParam() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.SaveFileParam)
  SharedDtor();
}

void SaveFileParam::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete starttime_;
  if (this != internal_default_instance()) delete stoptime_;
}

void SaveFileParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SaveFileParam::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SaveFileParam& SaveFileParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_SaveFileParam.base);
  return *internal_default_instance();
}


void SaveFileParam::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.SaveFileParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && starttime_ != NULL) {
    delete starttime_;
  }
  starttime_ = NULL;
  if (GetArenaNoVirtual() == NULL && stoptime_ != NULL) {
    delete stoptime_;
  }
  stoptime_ = NULL;
  channel_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool SaveFileParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.SaveFileParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .HIK_SDK_P.Time starttime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_starttime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HIK_SDK_P.Time stoptime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stoptime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HIK_SDK_P.SaveFileParam.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.SaveFileParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.SaveFileParam)
  return false;
#undef DO_
}

void SaveFileParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.SaveFileParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HIK_SDK_P.Time starttime = 1;
  if (this->has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_starttime(), output);
  }

  // .HIK_SDK_P.Time stoptime = 2;
  if (this->has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_stoptime(), output);
  }

  // int64 channel = 3;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->channel(), output);
  }

  // string filename = 4;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.SaveFileParam.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.SaveFileParam)
}

::google::protobuf::uint8* SaveFileParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.SaveFileParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HIK_SDK_P.Time starttime = 1;
  if (this->has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_starttime(), deterministic, target);
  }

  // .HIK_SDK_P.Time stoptime = 2;
  if (this->has_stoptime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_stoptime(), deterministic, target);
  }

  // int64 channel = 3;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->channel(), target);
  }

  // string filename = 4;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.SaveFileParam.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.SaveFileParam)
  return target;
}

size_t SaveFileParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.SaveFileParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 4;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // .HIK_SDK_P.Time starttime = 1;
  if (this->has_starttime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  // .HIK_SDK_P.Time stoptime = 2;
  if (this->has_stoptime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stoptime_);
  }

  // int64 channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveFileParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.SaveFileParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveFileParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SaveFileParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.SaveFileParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.SaveFileParam)
    MergeFrom(*source);
  }
}

void SaveFileParam::MergeFrom(const SaveFileParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.SaveFileParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_starttime()) {
    mutable_starttime()->::HIK_SDK_P::Time::MergeFrom(from.starttime());
  }
  if (from.has_stoptime()) {
    mutable_stoptime()->::HIK_SDK_P::Time::MergeFrom(from.stoptime());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void SaveFileParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.SaveFileParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveFileParam::CopyFrom(const SaveFileParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.SaveFileParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveFileParam::IsInitialized() const {
  return true;
}

void SaveFileParam::Swap(SaveFileParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SaveFileParam::InternalSwap(SaveFileParam* other) {
  using std::swap;
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(starttime_, other->starttime_);
  swap(stoptime_, other->stoptime_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SaveFileParam::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SaveFileParam1::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SaveFileParam1::kNvrfileFieldNumber;
const int SaveFileParam1::kDesfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SaveFileParam1::SaveFileParam1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_SaveFileParam1.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.SaveFileParam1)
}
SaveFileParam1::SaveFileParam1(const SaveFileParam1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nvrfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nvrfile().size() > 0) {
    nvrfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nvrfile_);
  }
  desfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desfile().size() > 0) {
    desfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desfile_);
  }
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.SaveFileParam1)
}

void SaveFileParam1::SharedCtor() {
  nvrfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SaveFileParam1::~SaveFileParam1() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.SaveFileParam1)
  SharedDtor();
}

void SaveFileParam1::SharedDtor() {
  nvrfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SaveFileParam1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SaveFileParam1::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SaveFileParam1& SaveFileParam1::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_SaveFileParam1.base);
  return *internal_default_instance();
}


void SaveFileParam1::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.SaveFileParam1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nvrfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SaveFileParam1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.SaveFileParam1)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string nvrfile = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nvrfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nvrfile().data(), static_cast<int>(this->nvrfile().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HIK_SDK_P.SaveFileParam1.nvrfile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desfile = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desfile().data(), static_cast<int>(this->desfile().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HIK_SDK_P.SaveFileParam1.desfile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.SaveFileParam1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.SaveFileParam1)
  return false;
#undef DO_
}

void SaveFileParam1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.SaveFileParam1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nvrfile = 1;
  if (this->nvrfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nvrfile().data(), static_cast<int>(this->nvrfile().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.SaveFileParam1.nvrfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nvrfile(), output);
  }

  // string desfile = 2;
  if (this->desfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desfile().data(), static_cast<int>(this->desfile().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.SaveFileParam1.desfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desfile(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.SaveFileParam1)
}

::google::protobuf::uint8* SaveFileParam1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.SaveFileParam1)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nvrfile = 1;
  if (this->nvrfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nvrfile().data(), static_cast<int>(this->nvrfile().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.SaveFileParam1.nvrfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nvrfile(), target);
  }

  // string desfile = 2;
  if (this->desfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desfile().data(), static_cast<int>(this->desfile().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.SaveFileParam1.desfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desfile(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.SaveFileParam1)
  return target;
}

size_t SaveFileParam1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.SaveFileParam1)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string nvrfile = 1;
  if (this->nvrfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nvrfile());
  }

  // string desfile = 2;
  if (this->desfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desfile());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveFileParam1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.SaveFileParam1)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveFileParam1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SaveFileParam1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.SaveFileParam1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.SaveFileParam1)
    MergeFrom(*source);
  }
}

void SaveFileParam1::MergeFrom(const SaveFileParam1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.SaveFileParam1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nvrfile().size() > 0) {

    nvrfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nvrfile_);
  }
  if (from.desfile().size() > 0) {

    desfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desfile_);
  }
}

void SaveFileParam1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.SaveFileParam1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveFileParam1::CopyFrom(const SaveFileParam1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.SaveFileParam1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveFileParam1::IsInitialized() const {
  return true;
}

void SaveFileParam1::Swap(SaveFileParam1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SaveFileParam1::InternalSwap(SaveFileParam1* other) {
  using std::swap;
  nvrfile_.Swap(&other->nvrfile_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desfile_.Swap(&other->desfile_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SaveFileParam1::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileData::InitAsDefaultInstance() {
  ::HIK_SDK_P::_FileData_default_instance_._instance.get_mutable()->starttime_ = const_cast< ::HIK_SDK_P::Time*>(
      ::HIK_SDK_P::Time::internal_default_instance());
  ::HIK_SDK_P::_FileData_default_instance_._instance.get_mutable()->stoptime_ = const_cast< ::HIK_SDK_P::Time*>(
      ::HIK_SDK_P::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileData::kFilenameFieldNumber;
const int FileData::kStarttimeFieldNumber;
const int FileData::kStoptimeFieldNumber;
const int FileData::kFilesizeFieldNumber;
const int FileData::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileData::FileData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_FileData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.FileData)
}
FileData::FileData(const FileData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_starttime()) {
    starttime_ = new ::HIK_SDK_P::Time(*from.starttime_);
  } else {
    starttime_ = NULL;
  }
  if (from.has_stoptime()) {
    stoptime_ = new ::HIK_SDK_P::Time(*from.stoptime_);
  } else {
    stoptime_ = NULL;
  }
  ::memcpy(&filesize_, &from.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&filesize_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.FileData)
}

void FileData::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(err_));
}

FileData::~FileData() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.FileData)
  SharedDtor();
}

void FileData::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete starttime_;
  if (this != internal_default_instance()) delete stoptime_;
}

void FileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileData::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileData& FileData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_FileData.base);
  return *internal_default_instance();
}


void FileData::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.FileData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && starttime_ != NULL) {
    delete starttime_;
  }
  starttime_ = NULL;
  if (GetArenaNoVirtual() == NULL && stoptime_ != NULL) {
    delete stoptime_;
  }
  stoptime_ = NULL;
  ::memset(&filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&filesize_)) + sizeof(err_));
  _internal_metadata_.Clear();
}

bool FileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.FileData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HIK_SDK_P.FileData.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HIK_SDK_P.Time starttime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_starttime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HIK_SDK_P.Time stoptime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stoptime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 filesize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 err = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.FileData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.FileData)
  return false;
#undef DO_
}

void FileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.FileData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.FileData.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // .HIK_SDK_P.Time starttime = 2;
  if (this->has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_starttime(), output);
  }

  // .HIK_SDK_P.Time stoptime = 3;
  if (this->has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_stoptime(), output);
  }

  // int64 filesize = 4;
  if (this->filesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->filesize(), output);
  }

  // int32 err = 5;
  if (this->err() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->err(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.FileData)
}

::google::protobuf::uint8* FileData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.FileData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HIK_SDK_P.FileData.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // .HIK_SDK_P.Time starttime = 2;
  if (this->has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_starttime(), deterministic, target);
  }

  // .HIK_SDK_P.Time stoptime = 3;
  if (this->has_stoptime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_stoptime(), deterministic, target);
  }

  // int64 filesize = 4;
  if (this->filesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->filesize(), target);
  }

  // int32 err = 5;
  if (this->err() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->err(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.FileData)
  return target;
}

size_t FileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.FileData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // .HIK_SDK_P.Time starttime = 2;
  if (this->has_starttime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  // .HIK_SDK_P.Time stoptime = 3;
  if (this->has_stoptime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stoptime_);
  }

  // int64 filesize = 4;
  if (this->filesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->filesize());
  }

  // int32 err = 5;
  if (this->err() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.FileData)
  GOOGLE_DCHECK_NE(&from, this);
  const FileData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.FileData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.FileData)
    MergeFrom(*source);
  }
}

void FileData::MergeFrom(const FileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.FileData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_starttime()) {
    mutable_starttime()->::HIK_SDK_P::Time::MergeFrom(from.starttime());
  }
  if (from.has_stoptime()) {
    mutable_stoptime()->::HIK_SDK_P::Time::MergeFrom(from.stoptime());
  }
  if (from.filesize() != 0) {
    set_filesize(from.filesize());
  }
  if (from.err() != 0) {
    set_err(from.err());
  }
}

void FileData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.FileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileData::CopyFrom(const FileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.FileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileData::IsInitialized() const {
  return true;
}

void FileData::Swap(FileData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileData::InternalSwap(FileData* other) {
  using std::swap;
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(starttime_, other->starttime_);
  swap(stoptime_, other->stoptime_);
  swap(filesize_, other->filesize_);
  swap(err_, other->err_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileData::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FindFileParam::InitAsDefaultInstance() {
  ::HIK_SDK_P::_FindFileParam_default_instance_._instance.get_mutable()->starttime_ = const_cast< ::HIK_SDK_P::Time*>(
      ::HIK_SDK_P::Time::internal_default_instance());
  ::HIK_SDK_P::_FindFileParam_default_instance_._instance.get_mutable()->stoptime_ = const_cast< ::HIK_SDK_P::Time*>(
      ::HIK_SDK_P::Time::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FindFileParam::kStarttimeFieldNumber;
const int FindFileParam::kStoptimeFieldNumber;
const int FindFileParam::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FindFileParam::FindFileParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_FindFileParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.FindFileParam)
}
FindFileParam::FindFileParam(const FindFileParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_starttime()) {
    starttime_ = new ::HIK_SDK_P::Time(*from.starttime_);
  } else {
    starttime_ = NULL;
  }
  if (from.has_stoptime()) {
    stoptime_ = new ::HIK_SDK_P::Time(*from.stoptime_);
  } else {
    stoptime_ = NULL;
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.FindFileParam)
}

void FindFileParam::SharedCtor() {
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(channel_));
}

FindFileParam::~FindFileParam() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.FindFileParam)
  SharedDtor();
}

void FindFileParam::SharedDtor() {
  if (this != internal_default_instance()) delete starttime_;
  if (this != internal_default_instance()) delete stoptime_;
}

void FindFileParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FindFileParam::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FindFileParam& FindFileParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_FindFileParam.base);
  return *internal_default_instance();
}


void FindFileParam::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.FindFileParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && starttime_ != NULL) {
    delete starttime_;
  }
  starttime_ = NULL;
  if (GetArenaNoVirtual() == NULL && stoptime_ != NULL) {
    delete stoptime_;
  }
  stoptime_ = NULL;
  channel_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool FindFileParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.FindFileParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .HIK_SDK_P.Time starttime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_starttime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HIK_SDK_P.Time stoptime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stoptime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.FindFileParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.FindFileParam)
  return false;
#undef DO_
}

void FindFileParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.FindFileParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HIK_SDK_P.Time starttime = 1;
  if (this->has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_starttime(), output);
  }

  // .HIK_SDK_P.Time stoptime = 2;
  if (this->has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_stoptime(), output);
  }

  // uint64 channel = 3;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->channel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.FindFileParam)
}

::google::protobuf::uint8* FindFileParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.FindFileParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .HIK_SDK_P.Time starttime = 1;
  if (this->has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_starttime(), deterministic, target);
  }

  // .HIK_SDK_P.Time stoptime = 2;
  if (this->has_stoptime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_stoptime(), deterministic, target);
  }

  // uint64 channel = 3;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->channel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.FindFileParam)
  return target;
}

size_t FindFileParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.FindFileParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .HIK_SDK_P.Time starttime = 1;
  if (this->has_starttime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  // .HIK_SDK_P.Time stoptime = 2;
  if (this->has_stoptime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *stoptime_);
  }

  // uint64 channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindFileParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.FindFileParam)
  GOOGLE_DCHECK_NE(&from, this);
  const FindFileParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FindFileParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.FindFileParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.FindFileParam)
    MergeFrom(*source);
  }
}

void FindFileParam::MergeFrom(const FindFileParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.FindFileParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_starttime()) {
    mutable_starttime()->::HIK_SDK_P::Time::MergeFrom(from.starttime());
  }
  if (from.has_stoptime()) {
    mutable_stoptime()->::HIK_SDK_P::Time::MergeFrom(from.stoptime());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void FindFileParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.FindFileParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindFileParam::CopyFrom(const FindFileParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.FindFileParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindFileParam::IsInitialized() const {
  return true;
}

void FindFileParam::Swap(FindFileParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FindFileParam::InternalSwap(FindFileParam* other) {
  using std::swap;
  swap(starttime_, other->starttime_);
  swap(stoptime_, other->stoptime_);
  swap(channel_, other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FindFileParam::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ErrCode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrCode::kErrcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrCode::ErrCode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_HIK_5fSDK_2eproto::scc_info_ErrCode.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HIK_SDK_P.ErrCode)
}
ErrCode::ErrCode(const ErrCode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:HIK_SDK_P.ErrCode)
}

void ErrCode::SharedCtor() {
  errcode_ = 0;
}

ErrCode::~ErrCode() {
  // @@protoc_insertion_point(destructor:HIK_SDK_P.ErrCode)
  SharedDtor();
}

void ErrCode::SharedDtor() {
}

void ErrCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ErrCode::descriptor() {
  ::protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ErrCode& ErrCode::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_HIK_5fSDK_2eproto::scc_info_ErrCode.base);
  return *internal_default_instance();
}


void ErrCode::Clear() {
// @@protoc_insertion_point(message_clear_start:HIK_SDK_P.ErrCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 0;
  _internal_metadata_.Clear();
}

bool ErrCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HIK_SDK_P.ErrCode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 errcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HIK_SDK_P.ErrCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HIK_SDK_P.ErrCode)
  return false;
#undef DO_
}

void ErrCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HIK_SDK_P.ErrCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HIK_SDK_P.ErrCode)
}

::google::protobuf::uint8* ErrCode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HIK_SDK_P.ErrCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HIK_SDK_P.ErrCode)
  return target;
}

size_t ErrCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HIK_SDK_P.ErrCode)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HIK_SDK_P.ErrCode)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrCode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrCode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HIK_SDK_P.ErrCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HIK_SDK_P.ErrCode)
    MergeFrom(*source);
  }
}

void ErrCode::MergeFrom(const ErrCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HIK_SDK_P.ErrCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void ErrCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HIK_SDK_P.ErrCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrCode::CopyFrom(const ErrCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HIK_SDK_P.ErrCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrCode::IsInitialized() const {
  return true;
}

void ErrCode::Swap(ErrCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrCode::InternalSwap(ErrCode* other) {
  using std::swap;
  swap(errcode_, other->errcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ErrCode::GetMetadata() const {
  protobuf_HIK_5fSDK_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_HIK_5fSDK_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace HIK_SDK_P
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::LoginInfo* Arena::CreateMaybeMessage< ::HIK_SDK_P::LoginInfo >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::LoginInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::ConfParam* Arena::CreateMaybeMessage< ::HIK_SDK_P::ConfParam >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::ConfParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::DeviceInfo* Arena::CreateMaybeMessage< ::HIK_SDK_P::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::DeviceInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::DeviceList* Arena::CreateMaybeMessage< ::HIK_SDK_P::DeviceList >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::DeviceList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::Empty* Arena::CreateMaybeMessage< ::HIK_SDK_P::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::Empty >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::Time* Arena::CreateMaybeMessage< ::HIK_SDK_P::Time >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::Time >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::SaveFileParam* Arena::CreateMaybeMessage< ::HIK_SDK_P::SaveFileParam >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::SaveFileParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::SaveFileParam1* Arena::CreateMaybeMessage< ::HIK_SDK_P::SaveFileParam1 >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::SaveFileParam1 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::FileData* Arena::CreateMaybeMessage< ::HIK_SDK_P::FileData >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::FileData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::FindFileParam* Arena::CreateMaybeMessage< ::HIK_SDK_P::FindFileParam >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::FindFileParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HIK_SDK_P::ErrCode* Arena::CreateMaybeMessage< ::HIK_SDK_P::ErrCode >(Arena* arena) {
  return Arena::CreateInternal< ::HIK_SDK_P::ErrCode >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
