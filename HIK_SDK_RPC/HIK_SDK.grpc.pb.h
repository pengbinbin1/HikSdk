// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: HIK_SDK.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_HIK_5fSDK_2eproto__INCLUDED
#define GRPC_HIK_5fSDK_2eproto__INCLUDED

#include "HIK_SDK.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace HIK_SDK_P {

// The HIK_SDK service definition.
class HIKSDK final {
 public:
  static constexpr char const* service_full_name() {
    return "HIK_SDK_P.HIKSDK";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // SDK Init
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo& request, ::HIK_SDK_P::ErrCode* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>> AsyncInit(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>> PrepareAsyncInit(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>>(PrepareAsyncInitRaw(context, request, cq));
    }
    virtual ::grpc::Status Uninit(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty& request, ::HIK_SDK_P::ErrCode* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>> AsyncUninit(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>>(AsyncUninitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>> PrepareAsyncUninit(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>>(PrepareAsyncUninitRaw(context, request, cq));
    }
    virtual ::grpc::Status SaveFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam& request, ::HIK_SDK_P::ErrCode* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>> AsyncSaveFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>>(AsyncSaveFileByTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>> PrepareAsyncSaveFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>>(PrepareAsyncSaveFileByTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status SaveFileByName(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1& request, ::HIK_SDK_P::ErrCode* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>> AsyncSaveFileByName(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>>(AsyncSaveFileByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>> PrepareAsyncSaveFileByName(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>>(PrepareAsyncSaveFileByNameRaw(context, request, cq));
    }
    virtual ::grpc::Status FindFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam& request, ::HIK_SDK_P::FileData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::FileData>> AsyncFindFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::FileData>>(AsyncFindFileByTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::FileData>> PrepareAsyncFindFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::FileData>>(PrepareAsyncFindFileByTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDVRConfig(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam& request, ::HIK_SDK_P::DeviceList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::DeviceList>> AsyncGetDVRConfig(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::DeviceList>>(AsyncGetDVRConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::DeviceList>> PrepareAsyncGetDVRConfig(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::DeviceList>>(PrepareAsyncGetDVRConfigRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // SDK Init
      virtual void Init(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo* request, ::HIK_SDK_P::ErrCode* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Uninit(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty* request, ::HIK_SDK_P::ErrCode* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SaveFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam* request, ::HIK_SDK_P::ErrCode* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SaveFileByName(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1* request, ::HIK_SDK_P::ErrCode* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam* request, ::HIK_SDK_P::FileData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDVRConfig(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam* request, ::HIK_SDK_P::DeviceList* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>* AsyncInitRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>* AsyncUninitRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>* PrepareAsyncUninitRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>* AsyncSaveFileByTimeRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>* PrepareAsyncSaveFileByTimeRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>* AsyncSaveFileByNameRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::ErrCode>* PrepareAsyncSaveFileByNameRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::FileData>* AsyncFindFileByTimeRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::FileData>* PrepareAsyncFindFileByTimeRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::DeviceList>* AsyncGetDVRConfigRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HIK_SDK_P::DeviceList>* PrepareAsyncGetDVRConfigRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Init(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo& request, ::HIK_SDK_P::ErrCode* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>> AsyncInit(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>> PrepareAsyncInit(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>>(PrepareAsyncInitRaw(context, request, cq));
    }
    ::grpc::Status Uninit(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty& request, ::HIK_SDK_P::ErrCode* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>> AsyncUninit(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>>(AsyncUninitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>> PrepareAsyncUninit(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>>(PrepareAsyncUninitRaw(context, request, cq));
    }
    ::grpc::Status SaveFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam& request, ::HIK_SDK_P::ErrCode* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>> AsyncSaveFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>>(AsyncSaveFileByTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>> PrepareAsyncSaveFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>>(PrepareAsyncSaveFileByTimeRaw(context, request, cq));
    }
    ::grpc::Status SaveFileByName(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1& request, ::HIK_SDK_P::ErrCode* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>> AsyncSaveFileByName(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>>(AsyncSaveFileByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>> PrepareAsyncSaveFileByName(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>>(PrepareAsyncSaveFileByNameRaw(context, request, cq));
    }
    ::grpc::Status FindFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam& request, ::HIK_SDK_P::FileData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::FileData>> AsyncFindFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::FileData>>(AsyncFindFileByTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::FileData>> PrepareAsyncFindFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::FileData>>(PrepareAsyncFindFileByTimeRaw(context, request, cq));
    }
    ::grpc::Status GetDVRConfig(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam& request, ::HIK_SDK_P::DeviceList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::DeviceList>> AsyncGetDVRConfig(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::DeviceList>>(AsyncGetDVRConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::DeviceList>> PrepareAsyncGetDVRConfig(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::DeviceList>>(PrepareAsyncGetDVRConfigRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Init(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo* request, ::HIK_SDK_P::ErrCode* response, std::function<void(::grpc::Status)>) override;
      void Uninit(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty* request, ::HIK_SDK_P::ErrCode* response, std::function<void(::grpc::Status)>) override;
      void SaveFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam* request, ::HIK_SDK_P::ErrCode* response, std::function<void(::grpc::Status)>) override;
      void SaveFileByName(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1* request, ::HIK_SDK_P::ErrCode* response, std::function<void(::grpc::Status)>) override;
      void FindFileByTime(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam* request, ::HIK_SDK_P::FileData* response, std::function<void(::grpc::Status)>) override;
      void GetDVRConfig(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam* request, ::HIK_SDK_P::DeviceList* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>* AsyncInitRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::LoginInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>* AsyncUninitRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>* PrepareAsyncUninitRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>* AsyncSaveFileByTimeRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>* PrepareAsyncSaveFileByTimeRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>* AsyncSaveFileByNameRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::ErrCode>* PrepareAsyncSaveFileByNameRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::SaveFileParam1& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::FileData>* AsyncFindFileByTimeRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::FileData>* PrepareAsyncFindFileByTimeRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::FindFileParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::DeviceList>* AsyncGetDVRConfigRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HIK_SDK_P::DeviceList>* PrepareAsyncGetDVRConfigRaw(::grpc::ClientContext* context, const ::HIK_SDK_P::ConfParam& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
    const ::grpc::internal::RpcMethod rpcmethod_Uninit_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveFileByTime_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveFileByName_;
    const ::grpc::internal::RpcMethod rpcmethod_FindFileByTime_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDVRConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // SDK Init
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::HIK_SDK_P::LoginInfo* request, ::HIK_SDK_P::ErrCode* response);
    virtual ::grpc::Status Uninit(::grpc::ServerContext* context, const ::HIK_SDK_P::Empty* request, ::HIK_SDK_P::ErrCode* response);
    virtual ::grpc::Status SaveFileByTime(::grpc::ServerContext* context, const ::HIK_SDK_P::SaveFileParam* request, ::HIK_SDK_P::ErrCode* response);
    virtual ::grpc::Status SaveFileByName(::grpc::ServerContext* context, const ::HIK_SDK_P::SaveFileParam1* request, ::HIK_SDK_P::ErrCode* response);
    virtual ::grpc::Status FindFileByTime(::grpc::ServerContext* context, const ::HIK_SDK_P::FindFileParam* request, ::HIK_SDK_P::FileData* response);
    virtual ::grpc::Status GetDVRConfig(::grpc::ServerContext* context, const ::HIK_SDK_P::ConfParam* request, ::HIK_SDK_P::DeviceList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* context, const ::HIK_SDK_P::LoginInfo* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::HIK_SDK_P::LoginInfo* request, ::grpc::ServerAsyncResponseWriter< ::HIK_SDK_P::ErrCode>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Uninit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Uninit() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Uninit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Uninit(::grpc::ServerContext* context, const ::HIK_SDK_P::Empty* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUninit(::grpc::ServerContext* context, ::HIK_SDK_P::Empty* request, ::grpc::ServerAsyncResponseWriter< ::HIK_SDK_P::ErrCode>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveFileByTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SaveFileByTime() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SaveFileByTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFileByTime(::grpc::ServerContext* context, const ::HIK_SDK_P::SaveFileParam* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveFileByTime(::grpc::ServerContext* context, ::HIK_SDK_P::SaveFileParam* request, ::grpc::ServerAsyncResponseWriter< ::HIK_SDK_P::ErrCode>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveFileByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SaveFileByName() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SaveFileByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFileByName(::grpc::ServerContext* context, const ::HIK_SDK_P::SaveFileParam1* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveFileByName(::grpc::ServerContext* context, ::HIK_SDK_P::SaveFileParam1* request, ::grpc::ServerAsyncResponseWriter< ::HIK_SDK_P::ErrCode>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindFileByTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FindFileByTime() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_FindFileByTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindFileByTime(::grpc::ServerContext* context, const ::HIK_SDK_P::FindFileParam* request, ::HIK_SDK_P::FileData* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindFileByTime(::grpc::ServerContext* context, ::HIK_SDK_P::FindFileParam* request, ::grpc::ServerAsyncResponseWriter< ::HIK_SDK_P::FileData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDVRConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetDVRConfig() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetDVRConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDVRConfig(::grpc::ServerContext* context, const ::HIK_SDK_P::ConfParam* request, ::HIK_SDK_P::DeviceList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDVRConfig(::grpc::ServerContext* context, ::HIK_SDK_P::ConfParam* request, ::grpc::ServerAsyncResponseWriter< ::HIK_SDK_P::DeviceList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Init<WithAsyncMethod_Uninit<WithAsyncMethod_SaveFileByTime<WithAsyncMethod_SaveFileByName<WithAsyncMethod_FindFileByTime<WithAsyncMethod_GetDVRConfig<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* context, const ::HIK_SDK_P::LoginInfo* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Uninit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Uninit() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Uninit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Uninit(::grpc::ServerContext* context, const ::HIK_SDK_P::Empty* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveFileByTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SaveFileByTime() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SaveFileByTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFileByTime(::grpc::ServerContext* context, const ::HIK_SDK_P::SaveFileParam* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveFileByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SaveFileByName() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SaveFileByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFileByName(::grpc::ServerContext* context, const ::HIK_SDK_P::SaveFileParam1* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindFileByTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FindFileByTime() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_FindFileByTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindFileByTime(::grpc::ServerContext* context, const ::HIK_SDK_P::FindFileParam* request, ::HIK_SDK_P::FileData* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDVRConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetDVRConfig() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetDVRConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDVRConfig(::grpc::ServerContext* context, const ::HIK_SDK_P::ConfParam* request, ::HIK_SDK_P::DeviceList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* context, const ::HIK_SDK_P::LoginInfo* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Uninit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Uninit() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Uninit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Uninit(::grpc::ServerContext* context, const ::HIK_SDK_P::Empty* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUninit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveFileByTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SaveFileByTime() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SaveFileByTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFileByTime(::grpc::ServerContext* context, const ::HIK_SDK_P::SaveFileParam* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveFileByTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveFileByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SaveFileByName() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SaveFileByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFileByName(::grpc::ServerContext* context, const ::HIK_SDK_P::SaveFileParam1* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveFileByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindFileByTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FindFileByTime() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_FindFileByTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindFileByTime(::grpc::ServerContext* context, const ::HIK_SDK_P::FindFileParam* request, ::HIK_SDK_P::FileData* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindFileByTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDVRConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetDVRConfig() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetDVRConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDVRConfig(::grpc::ServerContext* context, const ::HIK_SDK_P::ConfParam* request, ::HIK_SDK_P::DeviceList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDVRConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::HIK_SDK_P::LoginInfo, ::HIK_SDK_P::ErrCode>(std::bind(&WithStreamedUnaryMethod_Init<BaseClass>::StreamedInit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* context, const ::HIK_SDK_P::LoginInfo* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HIK_SDK_P::LoginInfo,::HIK_SDK_P::ErrCode>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Uninit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Uninit() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::HIK_SDK_P::Empty, ::HIK_SDK_P::ErrCode>(std::bind(&WithStreamedUnaryMethod_Uninit<BaseClass>::StreamedUninit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Uninit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Uninit(::grpc::ServerContext* context, const ::HIK_SDK_P::Empty* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUninit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HIK_SDK_P::Empty,::HIK_SDK_P::ErrCode>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveFileByTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SaveFileByTime() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::HIK_SDK_P::SaveFileParam, ::HIK_SDK_P::ErrCode>(std::bind(&WithStreamedUnaryMethod_SaveFileByTime<BaseClass>::StreamedSaveFileByTime, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SaveFileByTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveFileByTime(::grpc::ServerContext* context, const ::HIK_SDK_P::SaveFileParam* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveFileByTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HIK_SDK_P::SaveFileParam,::HIK_SDK_P::ErrCode>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveFileByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SaveFileByName() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::HIK_SDK_P::SaveFileParam1, ::HIK_SDK_P::ErrCode>(std::bind(&WithStreamedUnaryMethod_SaveFileByName<BaseClass>::StreamedSaveFileByName, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SaveFileByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveFileByName(::grpc::ServerContext* context, const ::HIK_SDK_P::SaveFileParam1* request, ::HIK_SDK_P::ErrCode* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveFileByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HIK_SDK_P::SaveFileParam1,::HIK_SDK_P::ErrCode>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindFileByTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FindFileByTime() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::HIK_SDK_P::FindFileParam, ::HIK_SDK_P::FileData>(std::bind(&WithStreamedUnaryMethod_FindFileByTime<BaseClass>::StreamedFindFileByTime, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FindFileByTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindFileByTime(::grpc::ServerContext* context, const ::HIK_SDK_P::FindFileParam* request, ::HIK_SDK_P::FileData* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindFileByTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HIK_SDK_P::FindFileParam,::HIK_SDK_P::FileData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDVRConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetDVRConfig() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::HIK_SDK_P::ConfParam, ::HIK_SDK_P::DeviceList>(std::bind(&WithStreamedUnaryMethod_GetDVRConfig<BaseClass>::StreamedGetDVRConfig, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDVRConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDVRConfig(::grpc::ServerContext* context, const ::HIK_SDK_P::ConfParam* request, ::HIK_SDK_P::DeviceList* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDVRConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HIK_SDK_P::ConfParam,::HIK_SDK_P::DeviceList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Uninit<WithStreamedUnaryMethod_SaveFileByTime<WithStreamedUnaryMethod_SaveFileByName<WithStreamedUnaryMethod_FindFileByTime<WithStreamedUnaryMethod_GetDVRConfig<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Uninit<WithStreamedUnaryMethod_SaveFileByTime<WithStreamedUnaryMethod_SaveFileByName<WithStreamedUnaryMethod_FindFileByTime<WithStreamedUnaryMethod_GetDVRConfig<Service > > > > > > StreamedService;
};

}  // namespace HIK_SDK_P


#endif  // GRPC_HIK_5fSDK_2eproto__INCLUDED
