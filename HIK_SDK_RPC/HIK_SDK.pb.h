// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HIK_SDK.proto

#ifndef PROTOBUF_INCLUDED_HIK_5fSDK_2eproto
#define PROTOBUF_INCLUDED_HIK_5fSDK_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_HIK_5fSDK_2eproto 

namespace protobuf_HIK_5fSDK_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_HIK_5fSDK_2eproto
namespace HIK_SDK_P {
class Access;
class AccessDefaultTypeInternal;
extern AccessDefaultTypeInternal _Access_default_instance_;
class ConfParam;
class ConfParamDefaultTypeInternal;
extern ConfParamDefaultTypeInternal _ConfParam_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class DeviceList;
class DeviceListDefaultTypeInternal;
extern DeviceListDefaultTypeInternal _DeviceList_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class ErrCode;
class ErrCodeDefaultTypeInternal;
extern ErrCodeDefaultTypeInternal _ErrCode_default_instance_;
class FileData;
class FileDataDefaultTypeInternal;
extern FileDataDefaultTypeInternal _FileData_default_instance_;
class FindFileParam;
class FindFileParamDefaultTypeInternal;
extern FindFileParamDefaultTypeInternal _FindFileParam_default_instance_;
class InitInfo;
class InitInfoDefaultTypeInternal;
extern InitInfoDefaultTypeInternal _InitInfo_default_instance_;
class LoginInfo;
class LoginInfoDefaultTypeInternal;
extern LoginInfoDefaultTypeInternal _LoginInfo_default_instance_;
class Port;
class PortDefaultTypeInternal;
extern PortDefaultTypeInternal _Port_default_instance_;
class SaveFileParam;
class SaveFileParamDefaultTypeInternal;
extern SaveFileParamDefaultTypeInternal _SaveFileParam_default_instance_;
class SaveFileParam1;
class SaveFileParam1DefaultTypeInternal;
extern SaveFileParam1DefaultTypeInternal _SaveFileParam1_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class UplodParam;
class UplodParamDefaultTypeInternal;
extern UplodParamDefaultTypeInternal _UplodParam_default_instance_;
class VideoId;
class VideoIdDefaultTypeInternal;
extern VideoIdDefaultTypeInternal _VideoId_default_instance_;
class VideoIdParam;
class VideoIdParamDefaultTypeInternal;
extern VideoIdParamDefaultTypeInternal _VideoIdParam_default_instance_;
class VideoURL;
class VideoURLDefaultTypeInternal;
extern VideoURLDefaultTypeInternal _VideoURL_default_instance_;
}  // namespace HIK_SDK_P
namespace google {
namespace protobuf {
template<> ::HIK_SDK_P::Access* Arena::CreateMaybeMessage<::HIK_SDK_P::Access>(Arena*);
template<> ::HIK_SDK_P::ConfParam* Arena::CreateMaybeMessage<::HIK_SDK_P::ConfParam>(Arena*);
template<> ::HIK_SDK_P::DeviceInfo* Arena::CreateMaybeMessage<::HIK_SDK_P::DeviceInfo>(Arena*);
template<> ::HIK_SDK_P::DeviceList* Arena::CreateMaybeMessage<::HIK_SDK_P::DeviceList>(Arena*);
template<> ::HIK_SDK_P::Empty* Arena::CreateMaybeMessage<::HIK_SDK_P::Empty>(Arena*);
template<> ::HIK_SDK_P::ErrCode* Arena::CreateMaybeMessage<::HIK_SDK_P::ErrCode>(Arena*);
template<> ::HIK_SDK_P::FileData* Arena::CreateMaybeMessage<::HIK_SDK_P::FileData>(Arena*);
template<> ::HIK_SDK_P::FindFileParam* Arena::CreateMaybeMessage<::HIK_SDK_P::FindFileParam>(Arena*);
template<> ::HIK_SDK_P::InitInfo* Arena::CreateMaybeMessage<::HIK_SDK_P::InitInfo>(Arena*);
template<> ::HIK_SDK_P::LoginInfo* Arena::CreateMaybeMessage<::HIK_SDK_P::LoginInfo>(Arena*);
template<> ::HIK_SDK_P::Port* Arena::CreateMaybeMessage<::HIK_SDK_P::Port>(Arena*);
template<> ::HIK_SDK_P::SaveFileParam* Arena::CreateMaybeMessage<::HIK_SDK_P::SaveFileParam>(Arena*);
template<> ::HIK_SDK_P::SaveFileParam1* Arena::CreateMaybeMessage<::HIK_SDK_P::SaveFileParam1>(Arena*);
template<> ::HIK_SDK_P::Time* Arena::CreateMaybeMessage<::HIK_SDK_P::Time>(Arena*);
template<> ::HIK_SDK_P::UplodParam* Arena::CreateMaybeMessage<::HIK_SDK_P::UplodParam>(Arena*);
template<> ::HIK_SDK_P::VideoId* Arena::CreateMaybeMessage<::HIK_SDK_P::VideoId>(Arena*);
template<> ::HIK_SDK_P::VideoIdParam* Arena::CreateMaybeMessage<::HIK_SDK_P::VideoIdParam>(Arena*);
template<> ::HIK_SDK_P::VideoURL* Arena::CreateMaybeMessage<::HIK_SDK_P::VideoURL>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace HIK_SDK_P {

// ===================================================================

class LoginInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.LoginInfo) */ {
 public:
  LoginInfo();
  virtual ~LoginInfo();

  LoginInfo(const LoginInfo& from);

  inline LoginInfo& operator=(const LoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginInfo(LoginInfo&& from) noexcept
    : LoginInfo() {
    *this = ::std::move(from);
  }

  inline LoginInfo& operator=(LoginInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginInfo* internal_default_instance() {
    return reinterpret_cast<const LoginInfo*>(
               &_LoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LoginInfo* other);
  friend void swap(LoginInfo& a, LoginInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginInfo* New() const final {
    return CreateMaybeMessage<LoginInfo>(NULL);
  }

  LoginInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginInfo& from);
  void MergeFrom(const LoginInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string user = 3;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string passwd = 4;
  void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // bool useAsynLogin = 5;
  void clear_useasynlogin();
  static const int kUseAsynLoginFieldNumber = 5;
  bool useasynlogin() const;
  void set_useasynlogin(bool value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.LoginInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::uint32 port_;
  bool useasynlogin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InitInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.InitInfo) */ {
 public:
  InitInfo();
  virtual ~InitInfo();

  InitInfo(const InitInfo& from);

  inline InitInfo& operator=(const InitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitInfo(InitInfo&& from) noexcept
    : InitInfo() {
    *this = ::std::move(from);
  }

  inline InitInfo& operator=(InitInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitInfo* internal_default_instance() {
    return reinterpret_cast<const InitInfo*>(
               &_InitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(InitInfo* other);
  friend void swap(InitInfo& a, InitInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitInfo* New() const final {
    return CreateMaybeMessage<InitInfo>(NULL);
  }

  InitInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitInfo& from);
  void MergeFrom(const InitInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceSN = 3;
  void clear_devicesn();
  static const int kDeviceSNFieldNumber = 3;
  const ::std::string& devicesn() const;
  void set_devicesn(const ::std::string& value);
  #if LANG_CXX11
  void set_devicesn(::std::string&& value);
  #endif
  void set_devicesn(const char* value);
  void set_devicesn(const char* value, size_t size);
  ::std::string* mutable_devicesn();
  ::std::string* release_devicesn();
  void set_allocated_devicesn(::std::string* devicesn);

  // int32 err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::google::protobuf::int32 err() const;
  void set_err(::google::protobuf::int32 value);

  // int32 deviceType = 2;
  void clear_devicetype();
  static const int kDeviceTypeFieldNumber = 2;
  ::google::protobuf::int32 devicetype() const;
  void set_devicetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.InitInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicesn_;
  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 devicetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Port : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.Port) */ {
 public:
  Port();
  virtual ~Port();

  Port(const Port& from);

  inline Port& operator=(const Port& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Port(Port&& from) noexcept
    : Port() {
    *this = ::std::move(from);
  }

  inline Port& operator=(Port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Port* internal_default_instance() {
    return reinterpret_cast<const Port*>(
               &_Port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Port* other);
  friend void swap(Port& a, Port& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Port* New() const final {
    return CreateMaybeMessage<Port>(NULL);
  }

  Port* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Port>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Port& from);
  void MergeFrom(const Port& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Port* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::google::protobuf::int32 err() const;
  void set_err(::google::protobuf::int32 value);

  // int32 rtsp = 2;
  void clear_rtsp();
  static const int kRtspFieldNumber = 2;
  ::google::protobuf::int32 rtsp() const;
  void set_rtsp(::google::protobuf::int32 value);

  // int32 http = 3;
  void clear_http();
  static const int kHttpFieldNumber = 3;
  ::google::protobuf::int32 http() const;
  void set_http(::google::protobuf::int32 value);

  // int32 https = 4;
  void clear_https();
  static const int kHttpsFieldNumber = 4;
  ::google::protobuf::int32 https() const;
  void set_https(::google::protobuf::int32 value);

  // int32 cmd = 5;
  void clear_cmd();
  static const int kCmdFieldNumber = 5;
  ::google::protobuf::int32 cmd() const;
  void set_cmd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.Port)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 rtsp_;
  ::google::protobuf::int32 http_;
  ::google::protobuf::int32 https_;
  ::google::protobuf::int32 cmd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.ConfParam) */ {
 public:
  ConfParam();
  virtual ~ConfParam();

  ConfParam(const ConfParam& from);

  inline ConfParam& operator=(const ConfParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfParam(ConfParam&& from) noexcept
    : ConfParam() {
    *this = ::std::move(from);
  }

  inline ConfParam& operator=(ConfParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfParam* internal_default_instance() {
    return reinterpret_cast<const ConfParam*>(
               &_ConfParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConfParam* other);
  friend void swap(ConfParam& a, ConfParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfParam* New() const final {
    return CreateMaybeMessage<ConfParam>(NULL);
  }

  ConfParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfParam& from);
  void MergeFrom(const ConfParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // int32 group = 2;
  void clear_group();
  static const int kGroupFieldNumber = 2;
  ::google::protobuf::int32 group() const;
  void set_group(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.ConfParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 command_;
  ::google::protobuf::int32 group_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(NULL);
  }

  DeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string user = 4;
  void clear_user();
  static const int kUserFieldNumber = 4;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // int32 channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.DeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.DeviceList) */ {
 public:
  DeviceList();
  virtual ~DeviceList();

  DeviceList(const DeviceList& from);

  inline DeviceList& operator=(const DeviceList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceList(DeviceList&& from) noexcept
    : DeviceList() {
    *this = ::std::move(from);
  }

  inline DeviceList& operator=(DeviceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceList* internal_default_instance() {
    return reinterpret_cast<const DeviceList*>(
               &_DeviceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DeviceList* other);
  friend void swap(DeviceList& a, DeviceList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceList* New() const final {
    return CreateMaybeMessage<DeviceList>(NULL);
  }

  DeviceList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceList& from);
  void MergeFrom(const DeviceList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HIK_SDK_P.DeviceInfo DeviceLists = 4;
  int devicelists_size() const;
  void clear_devicelists();
  static const int kDeviceListsFieldNumber = 4;
  ::HIK_SDK_P::DeviceInfo* mutable_devicelists(int index);
  ::google::protobuf::RepeatedPtrField< ::HIK_SDK_P::DeviceInfo >*
      mutable_devicelists();
  const ::HIK_SDK_P::DeviceInfo& devicelists(int index) const;
  ::HIK_SDK_P::DeviceInfo* add_devicelists();
  const ::google::protobuf::RepeatedPtrField< ::HIK_SDK_P::DeviceInfo >&
      devicelists() const;

  // int32 err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::google::protobuf::int32 err() const;
  void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.DeviceList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::HIK_SDK_P::DeviceInfo > devicelists_;
  ::google::protobuf::int32 err_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Time* other);
  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(NULL);
  }

  Time* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 dwYear = 1;
  void clear_dwyear();
  static const int kDwYearFieldNumber = 1;
  ::google::protobuf::uint64 dwyear() const;
  void set_dwyear(::google::protobuf::uint64 value);

  // uint64 dwMonth = 2;
  void clear_dwmonth();
  static const int kDwMonthFieldNumber = 2;
  ::google::protobuf::uint64 dwmonth() const;
  void set_dwmonth(::google::protobuf::uint64 value);

  // uint64 dwDay = 3;
  void clear_dwday();
  static const int kDwDayFieldNumber = 3;
  ::google::protobuf::uint64 dwday() const;
  void set_dwday(::google::protobuf::uint64 value);

  // uint64 dwHour = 4;
  void clear_dwhour();
  static const int kDwHourFieldNumber = 4;
  ::google::protobuf::uint64 dwhour() const;
  void set_dwhour(::google::protobuf::uint64 value);

  // uint64 dwMinute = 5;
  void clear_dwminute();
  static const int kDwMinuteFieldNumber = 5;
  ::google::protobuf::uint64 dwminute() const;
  void set_dwminute(::google::protobuf::uint64 value);

  // uint64 dwSecond = 6;
  void clear_dwsecond();
  static const int kDwSecondFieldNumber = 6;
  ::google::protobuf::uint64 dwsecond() const;
  void set_dwsecond(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.Time)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 dwyear_;
  ::google::protobuf::uint64 dwmonth_;
  ::google::protobuf::uint64 dwday_;
  ::google::protobuf::uint64 dwhour_;
  ::google::protobuf::uint64 dwminute_;
  ::google::protobuf::uint64 dwsecond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SaveFileParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.SaveFileParam) */ {
 public:
  SaveFileParam();
  virtual ~SaveFileParam();

  SaveFileParam(const SaveFileParam& from);

  inline SaveFileParam& operator=(const SaveFileParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveFileParam(SaveFileParam&& from) noexcept
    : SaveFileParam() {
    *this = ::std::move(from);
  }

  inline SaveFileParam& operator=(SaveFileParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveFileParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveFileParam* internal_default_instance() {
    return reinterpret_cast<const SaveFileParam*>(
               &_SaveFileParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SaveFileParam* other);
  friend void swap(SaveFileParam& a, SaveFileParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveFileParam* New() const final {
    return CreateMaybeMessage<SaveFileParam>(NULL);
  }

  SaveFileParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveFileParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveFileParam& from);
  void MergeFrom(const SaveFileParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveFileParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 4;
  void clear_filename();
  static const int kFilenameFieldNumber = 4;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // .HIK_SDK_P.Time starttime = 1;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStarttimeFieldNumber = 1;
  private:
  const ::HIK_SDK_P::Time& _internal_starttime() const;
  public:
  const ::HIK_SDK_P::Time& starttime() const;
  ::HIK_SDK_P::Time* release_starttime();
  ::HIK_SDK_P::Time* mutable_starttime();
  void set_allocated_starttime(::HIK_SDK_P::Time* starttime);

  // .HIK_SDK_P.Time stoptime = 2;
  bool has_stoptime() const;
  void clear_stoptime();
  static const int kStoptimeFieldNumber = 2;
  private:
  const ::HIK_SDK_P::Time& _internal_stoptime() const;
  public:
  const ::HIK_SDK_P::Time& stoptime() const;
  ::HIK_SDK_P::Time* release_stoptime();
  ::HIK_SDK_P::Time* mutable_stoptime();
  void set_allocated_stoptime(::HIK_SDK_P::Time* stoptime);

  // int64 channel = 3;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  ::google::protobuf::int64 channel() const;
  void set_channel(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.SaveFileParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::HIK_SDK_P::Time* starttime_;
  ::HIK_SDK_P::Time* stoptime_;
  ::google::protobuf::int64 channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SaveFileParam1 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.SaveFileParam1) */ {
 public:
  SaveFileParam1();
  virtual ~SaveFileParam1();

  SaveFileParam1(const SaveFileParam1& from);

  inline SaveFileParam1& operator=(const SaveFileParam1& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveFileParam1(SaveFileParam1&& from) noexcept
    : SaveFileParam1() {
    *this = ::std::move(from);
  }

  inline SaveFileParam1& operator=(SaveFileParam1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveFileParam1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveFileParam1* internal_default_instance() {
    return reinterpret_cast<const SaveFileParam1*>(
               &_SaveFileParam1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SaveFileParam1* other);
  friend void swap(SaveFileParam1& a, SaveFileParam1& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveFileParam1* New() const final {
    return CreateMaybeMessage<SaveFileParam1>(NULL);
  }

  SaveFileParam1* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveFileParam1>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveFileParam1& from);
  void MergeFrom(const SaveFileParam1& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveFileParam1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nvrfile = 1;
  void clear_nvrfile();
  static const int kNvrfileFieldNumber = 1;
  const ::std::string& nvrfile() const;
  void set_nvrfile(const ::std::string& value);
  #if LANG_CXX11
  void set_nvrfile(::std::string&& value);
  #endif
  void set_nvrfile(const char* value);
  void set_nvrfile(const char* value, size_t size);
  ::std::string* mutable_nvrfile();
  ::std::string* release_nvrfile();
  void set_allocated_nvrfile(::std::string* nvrfile);

  // string desfile = 2;
  void clear_desfile();
  static const int kDesfileFieldNumber = 2;
  const ::std::string& desfile() const;
  void set_desfile(const ::std::string& value);
  #if LANG_CXX11
  void set_desfile(::std::string&& value);
  #endif
  void set_desfile(const char* value);
  void set_desfile(const char* value, size_t size);
  ::std::string* mutable_desfile();
  ::std::string* release_desfile();
  void set_allocated_desfile(::std::string* desfile);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.SaveFileParam1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nvrfile_;
  ::google::protobuf::internal::ArenaStringPtr desfile_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.FileData) */ {
 public:
  FileData();
  virtual ~FileData();

  FileData(const FileData& from);

  inline FileData& operator=(const FileData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileData(FileData&& from) noexcept
    : FileData() {
    *this = ::std::move(from);
  }

  inline FileData& operator=(FileData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileData* internal_default_instance() {
    return reinterpret_cast<const FileData*>(
               &_FileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(FileData* other);
  friend void swap(FileData& a, FileData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileData* New() const final {
    return CreateMaybeMessage<FileData>(NULL);
  }

  FileData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileData& from);
  void MergeFrom(const FileData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // .HIK_SDK_P.Time starttime = 2;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStarttimeFieldNumber = 2;
  private:
  const ::HIK_SDK_P::Time& _internal_starttime() const;
  public:
  const ::HIK_SDK_P::Time& starttime() const;
  ::HIK_SDK_P::Time* release_starttime();
  ::HIK_SDK_P::Time* mutable_starttime();
  void set_allocated_starttime(::HIK_SDK_P::Time* starttime);

  // .HIK_SDK_P.Time stoptime = 3;
  bool has_stoptime() const;
  void clear_stoptime();
  static const int kStoptimeFieldNumber = 3;
  private:
  const ::HIK_SDK_P::Time& _internal_stoptime() const;
  public:
  const ::HIK_SDK_P::Time& stoptime() const;
  ::HIK_SDK_P::Time* release_stoptime();
  ::HIK_SDK_P::Time* mutable_stoptime();
  void set_allocated_stoptime(::HIK_SDK_P::Time* stoptime);

  // int64 filesize = 4;
  void clear_filesize();
  static const int kFilesizeFieldNumber = 4;
  ::google::protobuf::int64 filesize() const;
  void set_filesize(::google::protobuf::int64 value);

  // int32 err = 5;
  void clear_err();
  static const int kErrFieldNumber = 5;
  ::google::protobuf::int32 err() const;
  void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.FileData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::HIK_SDK_P::Time* starttime_;
  ::HIK_SDK_P::Time* stoptime_;
  ::google::protobuf::int64 filesize_;
  ::google::protobuf::int32 err_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FindFileParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.FindFileParam) */ {
 public:
  FindFileParam();
  virtual ~FindFileParam();

  FindFileParam(const FindFileParam& from);

  inline FindFileParam& operator=(const FindFileParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindFileParam(FindFileParam&& from) noexcept
    : FindFileParam() {
    *this = ::std::move(from);
  }

  inline FindFileParam& operator=(FindFileParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindFileParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindFileParam* internal_default_instance() {
    return reinterpret_cast<const FindFileParam*>(
               &_FindFileParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(FindFileParam* other);
  friend void swap(FindFileParam& a, FindFileParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindFileParam* New() const final {
    return CreateMaybeMessage<FindFileParam>(NULL);
  }

  FindFileParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FindFileParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FindFileParam& from);
  void MergeFrom(const FindFileParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindFileParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .HIK_SDK_P.Time starttime = 1;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStarttimeFieldNumber = 1;
  private:
  const ::HIK_SDK_P::Time& _internal_starttime() const;
  public:
  const ::HIK_SDK_P::Time& starttime() const;
  ::HIK_SDK_P::Time* release_starttime();
  ::HIK_SDK_P::Time* mutable_starttime();
  void set_allocated_starttime(::HIK_SDK_P::Time* starttime);

  // .HIK_SDK_P.Time stoptime = 2;
  bool has_stoptime() const;
  void clear_stoptime();
  static const int kStoptimeFieldNumber = 2;
  private:
  const ::HIK_SDK_P::Time& _internal_stoptime() const;
  public:
  const ::HIK_SDK_P::Time& stoptime() const;
  ::HIK_SDK_P::Time* release_stoptime();
  ::HIK_SDK_P::Time* mutable_stoptime();
  void set_allocated_stoptime(::HIK_SDK_P::Time* stoptime);

  // uint64 channel = 3;
  void clear_channel();
  static const int kChannelFieldNumber = 3;
  ::google::protobuf::uint64 channel() const;
  void set_channel(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.FindFileParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::HIK_SDK_P::Time* starttime_;
  ::HIK_SDK_P::Time* stoptime_;
  ::google::protobuf::uint64 channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Access : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.Access) */ {
 public:
  Access();
  virtual ~Access();

  Access(const Access& from);

  inline Access& operator=(const Access& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Access(Access&& from) noexcept
    : Access() {
    *this = ::std::move(from);
  }

  inline Access& operator=(Access&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Access& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Access* internal_default_instance() {
    return reinterpret_cast<const Access*>(
               &_Access_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Access* other);
  friend void swap(Access& a, Access& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Access* New() const final {
    return CreateMaybeMessage<Access>(NULL);
  }

  Access* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Access>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Access& from);
  void MergeFrom(const Access& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Access* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accesskey = 1;
  void clear_accesskey();
  static const int kAccesskeyFieldNumber = 1;
  const ::std::string& accesskey() const;
  void set_accesskey(const ::std::string& value);
  #if LANG_CXX11
  void set_accesskey(::std::string&& value);
  #endif
  void set_accesskey(const char* value);
  void set_accesskey(const char* value, size_t size);
  ::std::string* mutable_accesskey();
  ::std::string* release_accesskey();
  void set_allocated_accesskey(::std::string* accesskey);

  // string accesskeySecret = 2;
  void clear_accesskeysecret();
  static const int kAccesskeySecretFieldNumber = 2;
  const ::std::string& accesskeysecret() const;
  void set_accesskeysecret(const ::std::string& value);
  #if LANG_CXX11
  void set_accesskeysecret(::std::string&& value);
  #endif
  void set_accesskeysecret(const char* value);
  void set_accesskeysecret(const char* value, size_t size);
  ::std::string* mutable_accesskeysecret();
  ::std::string* release_accesskeysecret();
  void set_allocated_accesskeysecret(::std::string* accesskeysecret);

  // string regionId = 3;
  void clear_regionid();
  static const int kRegionIdFieldNumber = 3;
  const ::std::string& regionid() const;
  void set_regionid(const ::std::string& value);
  #if LANG_CXX11
  void set_regionid(::std::string&& value);
  #endif
  void set_regionid(const char* value);
  void set_regionid(const char* value, size_t size);
  ::std::string* mutable_regionid();
  ::std::string* release_regionid();
  void set_allocated_regionid(::std::string* regionid);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.Access)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accesskey_;
  ::google::protobuf::internal::ArenaStringPtr accesskeysecret_;
  ::google::protobuf::internal::ArenaStringPtr regionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UplodParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.UplodParam) */ {
 public:
  UplodParam();
  virtual ~UplodParam();

  UplodParam(const UplodParam& from);

  inline UplodParam& operator=(const UplodParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UplodParam(UplodParam&& from) noexcept
    : UplodParam() {
    *this = ::std::move(from);
  }

  inline UplodParam& operator=(UplodParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UplodParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UplodParam* internal_default_instance() {
    return reinterpret_cast<const UplodParam*>(
               &_UplodParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(UplodParam* other);
  friend void swap(UplodParam& a, UplodParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UplodParam* New() const final {
    return CreateMaybeMessage<UplodParam>(NULL);
  }

  UplodParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UplodParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UplodParam& from);
  void MergeFrom(const UplodParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UplodParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // string videoTitle = 3;
  void clear_videotitle();
  static const int kVideoTitleFieldNumber = 3;
  const ::std::string& videotitle() const;
  void set_videotitle(const ::std::string& value);
  #if LANG_CXX11
  void set_videotitle(::std::string&& value);
  #endif
  void set_videotitle(const char* value);
  void set_videotitle(const char* value, size_t size);
  ::std::string* mutable_videotitle();
  ::std::string* release_videotitle();
  void set_allocated_videotitle(::std::string* videotitle);

  // .HIK_SDK_P.Access access = 1;
  bool has_access() const;
  void clear_access();
  static const int kAccessFieldNumber = 1;
  private:
  const ::HIK_SDK_P::Access& _internal_access() const;
  public:
  const ::HIK_SDK_P::Access& access() const;
  ::HIK_SDK_P::Access* release_access();
  ::HIK_SDK_P::Access* mutable_access();
  void set_allocated_access(::HIK_SDK_P::Access* access);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.UplodParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr videotitle_;
  ::HIK_SDK_P::Access* access_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.VideoId) */ {
 public:
  VideoId();
  virtual ~VideoId();

  VideoId(const VideoId& from);

  inline VideoId& operator=(const VideoId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoId(VideoId&& from) noexcept
    : VideoId() {
    *this = ::std::move(from);
  }

  inline VideoId& operator=(VideoId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoId* internal_default_instance() {
    return reinterpret_cast<const VideoId*>(
               &_VideoId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(VideoId* other);
  friend void swap(VideoId& a, VideoId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoId* New() const final {
    return CreateMaybeMessage<VideoId>(NULL);
  }

  VideoId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoId& from);
  void MergeFrom(const VideoId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string videoId = 2;
  void clear_videoid();
  static const int kVideoIdFieldNumber = 2;
  const ::std::string& videoid() const;
  void set_videoid(const ::std::string& value);
  #if LANG_CXX11
  void set_videoid(::std::string&& value);
  #endif
  void set_videoid(const char* value);
  void set_videoid(const char* value, size_t size);
  ::std::string* mutable_videoid();
  ::std::string* release_videoid();
  void set_allocated_videoid(::std::string* videoid);

  // int32 err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::google::protobuf::int32 err() const;
  void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.VideoId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr videoid_;
  ::google::protobuf::int32 err_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoIdParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.VideoIdParam) */ {
 public:
  VideoIdParam();
  virtual ~VideoIdParam();

  VideoIdParam(const VideoIdParam& from);

  inline VideoIdParam& operator=(const VideoIdParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoIdParam(VideoIdParam&& from) noexcept
    : VideoIdParam() {
    *this = ::std::move(from);
  }

  inline VideoIdParam& operator=(VideoIdParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoIdParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoIdParam* internal_default_instance() {
    return reinterpret_cast<const VideoIdParam*>(
               &_VideoIdParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(VideoIdParam* other);
  friend void swap(VideoIdParam& a, VideoIdParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoIdParam* New() const final {
    return CreateMaybeMessage<VideoIdParam>(NULL);
  }

  VideoIdParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoIdParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoIdParam& from);
  void MergeFrom(const VideoIdParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoIdParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string videoId = 2;
  void clear_videoid();
  static const int kVideoIdFieldNumber = 2;
  const ::std::string& videoid() const;
  void set_videoid(const ::std::string& value);
  #if LANG_CXX11
  void set_videoid(::std::string&& value);
  #endif
  void set_videoid(const char* value);
  void set_videoid(const char* value, size_t size);
  ::std::string* mutable_videoid();
  ::std::string* release_videoid();
  void set_allocated_videoid(::std::string* videoid);

  // .HIK_SDK_P.Access access = 1;
  bool has_access() const;
  void clear_access();
  static const int kAccessFieldNumber = 1;
  private:
  const ::HIK_SDK_P::Access& _internal_access() const;
  public:
  const ::HIK_SDK_P::Access& access() const;
  ::HIK_SDK_P::Access* release_access();
  ::HIK_SDK_P::Access* mutable_access();
  void set_allocated_access(::HIK_SDK_P::Access* access);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.VideoIdParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr videoid_;
  ::HIK_SDK_P::Access* access_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoURL : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.VideoURL) */ {
 public:
  VideoURL();
  virtual ~VideoURL();

  VideoURL(const VideoURL& from);

  inline VideoURL& operator=(const VideoURL& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoURL(VideoURL&& from) noexcept
    : VideoURL() {
    *this = ::std::move(from);
  }

  inline VideoURL& operator=(VideoURL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoURL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoURL* internal_default_instance() {
    return reinterpret_cast<const VideoURL*>(
               &_VideoURL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(VideoURL* other);
  friend void swap(VideoURL& a, VideoURL& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoURL* New() const final {
    return CreateMaybeMessage<VideoURL>(NULL);
  }

  VideoURL* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VideoURL>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VideoURL& from);
  void MergeFrom(const VideoURL& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoURL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string URL = 2;
  void clear_url();
  static const int kURLFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // int32 err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::google::protobuf::int32 err() const;
  void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.VideoURL)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 err_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HIK_SDK_P.ErrCode) */ {
 public:
  ErrCode();
  virtual ~ErrCode();

  ErrCode(const ErrCode& from);

  inline ErrCode& operator=(const ErrCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrCode(ErrCode&& from) noexcept
    : ErrCode() {
    *this = ::std::move(from);
  }

  inline ErrCode& operator=(ErrCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrCode* internal_default_instance() {
    return reinterpret_cast<const ErrCode*>(
               &_ErrCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ErrCode* other);
  friend void swap(ErrCode& a, ErrCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrCode* New() const final {
    return CreateMaybeMessage<ErrCode>(NULL);
  }

  ErrCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrCode& from);
  void MergeFrom(const ErrCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 errcode = 1;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HIK_SDK_P.ErrCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_HIK_5fSDK_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginInfo

// string ip = 1;
inline void LoginInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginInfo::ip() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.LoginInfo.ip)
  return ip_.GetNoArena();
}
inline void LoginInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.LoginInfo.ip)
}
#if LANG_CXX11
inline void LoginInfo::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.LoginInfo.ip)
}
#endif
inline void LoginInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.LoginInfo.ip)
}
inline void LoginInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.LoginInfo.ip)
}
inline ::std::string* LoginInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.LoginInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginInfo::release_ip() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.LoginInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.LoginInfo.ip)
}

// uint32 port = 2;
inline void LoginInfo::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 LoginInfo::port() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.LoginInfo.port)
  return port_;
}
inline void LoginInfo::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.LoginInfo.port)
}

// string user = 3;
inline void LoginInfo::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginInfo::user() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.LoginInfo.user)
  return user_.GetNoArena();
}
inline void LoginInfo::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.LoginInfo.user)
}
#if LANG_CXX11
inline void LoginInfo::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.LoginInfo.user)
}
#endif
inline void LoginInfo::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.LoginInfo.user)
}
inline void LoginInfo::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.LoginInfo.user)
}
inline ::std::string* LoginInfo::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.LoginInfo.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginInfo::release_user() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.LoginInfo.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginInfo::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.LoginInfo.user)
}

// string passwd = 4;
inline void LoginInfo::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginInfo::passwd() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.LoginInfo.passwd)
  return passwd_.GetNoArena();
}
inline void LoginInfo::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.LoginInfo.passwd)
}
#if LANG_CXX11
inline void LoginInfo::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.LoginInfo.passwd)
}
#endif
inline void LoginInfo::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.LoginInfo.passwd)
}
inline void LoginInfo::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.LoginInfo.passwd)
}
inline ::std::string* LoginInfo::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.LoginInfo.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginInfo::release_passwd() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.LoginInfo.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginInfo::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.LoginInfo.passwd)
}

// bool useAsynLogin = 5;
inline void LoginInfo::clear_useasynlogin() {
  useasynlogin_ = false;
}
inline bool LoginInfo::useasynlogin() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.LoginInfo.useAsynLogin)
  return useasynlogin_;
}
inline void LoginInfo::set_useasynlogin(bool value) {
  
  useasynlogin_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.LoginInfo.useAsynLogin)
}

// -------------------------------------------------------------------

// InitInfo

// int32 err = 1;
inline void InitInfo::clear_err() {
  err_ = 0;
}
inline ::google::protobuf::int32 InitInfo::err() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.InitInfo.err)
  return err_;
}
inline void InitInfo::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.InitInfo.err)
}

// int32 deviceType = 2;
inline void InitInfo::clear_devicetype() {
  devicetype_ = 0;
}
inline ::google::protobuf::int32 InitInfo::devicetype() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.InitInfo.deviceType)
  return devicetype_;
}
inline void InitInfo::set_devicetype(::google::protobuf::int32 value) {
  
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.InitInfo.deviceType)
}

// string deviceSN = 3;
inline void InitInfo::clear_devicesn() {
  devicesn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InitInfo::devicesn() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.InitInfo.deviceSN)
  return devicesn_.GetNoArena();
}
inline void InitInfo::set_devicesn(const ::std::string& value) {
  
  devicesn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.InitInfo.deviceSN)
}
#if LANG_CXX11
inline void InitInfo::set_devicesn(::std::string&& value) {
  
  devicesn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.InitInfo.deviceSN)
}
#endif
inline void InitInfo::set_devicesn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  devicesn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.InitInfo.deviceSN)
}
inline void InitInfo::set_devicesn(const char* value, size_t size) {
  
  devicesn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.InitInfo.deviceSN)
}
inline ::std::string* InitInfo::mutable_devicesn() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.InitInfo.deviceSN)
  return devicesn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InitInfo::release_devicesn() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.InitInfo.deviceSN)
  
  return devicesn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InitInfo::set_allocated_devicesn(::std::string* devicesn) {
  if (devicesn != NULL) {
    
  } else {
    
  }
  devicesn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicesn);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.InitInfo.deviceSN)
}

// -------------------------------------------------------------------

// Port

// int32 err = 1;
inline void Port::clear_err() {
  err_ = 0;
}
inline ::google::protobuf::int32 Port::err() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Port.err)
  return err_;
}
inline void Port::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Port.err)
}

// int32 rtsp = 2;
inline void Port::clear_rtsp() {
  rtsp_ = 0;
}
inline ::google::protobuf::int32 Port::rtsp() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Port.rtsp)
  return rtsp_;
}
inline void Port::set_rtsp(::google::protobuf::int32 value) {
  
  rtsp_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Port.rtsp)
}

// int32 http = 3;
inline void Port::clear_http() {
  http_ = 0;
}
inline ::google::protobuf::int32 Port::http() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Port.http)
  return http_;
}
inline void Port::set_http(::google::protobuf::int32 value) {
  
  http_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Port.http)
}

// int32 https = 4;
inline void Port::clear_https() {
  https_ = 0;
}
inline ::google::protobuf::int32 Port::https() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Port.https)
  return https_;
}
inline void Port::set_https(::google::protobuf::int32 value) {
  
  https_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Port.https)
}

// int32 cmd = 5;
inline void Port::clear_cmd() {
  cmd_ = 0;
}
inline ::google::protobuf::int32 Port::cmd() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Port.cmd)
  return cmd_;
}
inline void Port::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Port.cmd)
}

// -------------------------------------------------------------------

// ConfParam

// int32 command = 1;
inline void ConfParam::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 ConfParam::command() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.ConfParam.command)
  return command_;
}
inline void ConfParam::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.ConfParam.command)
}

// int32 group = 2;
inline void ConfParam::clear_group() {
  group_ = 0;
}
inline ::google::protobuf::int32 ConfParam::group() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.ConfParam.group)
  return group_;
}
inline void ConfParam::set_group(::google::protobuf::int32 value) {
  
  group_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.ConfParam.group)
}

// -------------------------------------------------------------------

// DeviceInfo

// int32 channel = 1;
inline void DeviceInfo::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 DeviceInfo::channel() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.DeviceInfo.channel)
  return channel_;
}
inline void DeviceInfo::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.DeviceInfo.channel)
}

// string ip = 2;
inline void DeviceInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::ip() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.DeviceInfo.ip)
  return ip_.GetNoArena();
}
inline void DeviceInfo::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.DeviceInfo.ip)
}
#if LANG_CXX11
inline void DeviceInfo::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.DeviceInfo.ip)
}
#endif
inline void DeviceInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.DeviceInfo.ip)
}
inline void DeviceInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.DeviceInfo.ip)
}
inline ::std::string* DeviceInfo::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.DeviceInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_ip() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.DeviceInfo.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.DeviceInfo.ip)
}

// uint32 port = 3;
inline void DeviceInfo::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 DeviceInfo::port() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.DeviceInfo.port)
  return port_;
}
inline void DeviceInfo::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.DeviceInfo.port)
}

// string user = 4;
inline void DeviceInfo::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::user() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.DeviceInfo.user)
  return user_.GetNoArena();
}
inline void DeviceInfo::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.DeviceInfo.user)
}
#if LANG_CXX11
inline void DeviceInfo::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.DeviceInfo.user)
}
#endif
inline void DeviceInfo::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.DeviceInfo.user)
}
inline void DeviceInfo::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.DeviceInfo.user)
}
inline ::std::string* DeviceInfo::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.DeviceInfo.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_user() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.DeviceInfo.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.DeviceInfo.user)
}

// string password = 5;
inline void DeviceInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::password() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.DeviceInfo.password)
  return password_.GetNoArena();
}
inline void DeviceInfo::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.DeviceInfo.password)
}
#if LANG_CXX11
inline void DeviceInfo::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.DeviceInfo.password)
}
#endif
inline void DeviceInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.DeviceInfo.password)
}
inline void DeviceInfo::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.DeviceInfo.password)
}
inline ::std::string* DeviceInfo::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.DeviceInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_password() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.DeviceInfo.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.DeviceInfo.password)
}

// -------------------------------------------------------------------

// DeviceList

// int32 err = 1;
inline void DeviceList::clear_err() {
  err_ = 0;
}
inline ::google::protobuf::int32 DeviceList::err() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.DeviceList.err)
  return err_;
}
inline void DeviceList::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.DeviceList.err)
}

// repeated .HIK_SDK_P.DeviceInfo DeviceLists = 4;
inline int DeviceList::devicelists_size() const {
  return devicelists_.size();
}
inline void DeviceList::clear_devicelists() {
  devicelists_.Clear();
}
inline ::HIK_SDK_P::DeviceInfo* DeviceList::mutable_devicelists(int index) {
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.DeviceList.DeviceLists)
  return devicelists_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::HIK_SDK_P::DeviceInfo >*
DeviceList::mutable_devicelists() {
  // @@protoc_insertion_point(field_mutable_list:HIK_SDK_P.DeviceList.DeviceLists)
  return &devicelists_;
}
inline const ::HIK_SDK_P::DeviceInfo& DeviceList::devicelists(int index) const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.DeviceList.DeviceLists)
  return devicelists_.Get(index);
}
inline ::HIK_SDK_P::DeviceInfo* DeviceList::add_devicelists() {
  // @@protoc_insertion_point(field_add:HIK_SDK_P.DeviceList.DeviceLists)
  return devicelists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HIK_SDK_P::DeviceInfo >&
DeviceList::devicelists() const {
  // @@protoc_insertion_point(field_list:HIK_SDK_P.DeviceList.DeviceLists)
  return devicelists_;
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// Time

// uint64 dwYear = 1;
inline void Time::clear_dwyear() {
  dwyear_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Time::dwyear() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Time.dwYear)
  return dwyear_;
}
inline void Time::set_dwyear(::google::protobuf::uint64 value) {
  
  dwyear_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Time.dwYear)
}

// uint64 dwMonth = 2;
inline void Time::clear_dwmonth() {
  dwmonth_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Time::dwmonth() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Time.dwMonth)
  return dwmonth_;
}
inline void Time::set_dwmonth(::google::protobuf::uint64 value) {
  
  dwmonth_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Time.dwMonth)
}

// uint64 dwDay = 3;
inline void Time::clear_dwday() {
  dwday_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Time::dwday() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Time.dwDay)
  return dwday_;
}
inline void Time::set_dwday(::google::protobuf::uint64 value) {
  
  dwday_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Time.dwDay)
}

// uint64 dwHour = 4;
inline void Time::clear_dwhour() {
  dwhour_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Time::dwhour() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Time.dwHour)
  return dwhour_;
}
inline void Time::set_dwhour(::google::protobuf::uint64 value) {
  
  dwhour_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Time.dwHour)
}

// uint64 dwMinute = 5;
inline void Time::clear_dwminute() {
  dwminute_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Time::dwminute() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Time.dwMinute)
  return dwminute_;
}
inline void Time::set_dwminute(::google::protobuf::uint64 value) {
  
  dwminute_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Time.dwMinute)
}

// uint64 dwSecond = 6;
inline void Time::clear_dwsecond() {
  dwsecond_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Time::dwsecond() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Time.dwSecond)
  return dwsecond_;
}
inline void Time::set_dwsecond(::google::protobuf::uint64 value) {
  
  dwsecond_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Time.dwSecond)
}

// -------------------------------------------------------------------

// SaveFileParam

// .HIK_SDK_P.Time starttime = 1;
inline bool SaveFileParam::has_starttime() const {
  return this != internal_default_instance() && starttime_ != NULL;
}
inline void SaveFileParam::clear_starttime() {
  if (GetArenaNoVirtual() == NULL && starttime_ != NULL) {
    delete starttime_;
  }
  starttime_ = NULL;
}
inline const ::HIK_SDK_P::Time& SaveFileParam::_internal_starttime() const {
  return *starttime_;
}
inline const ::HIK_SDK_P::Time& SaveFileParam::starttime() const {
  const ::HIK_SDK_P::Time* p = starttime_;
  // @@protoc_insertion_point(field_get:HIK_SDK_P.SaveFileParam.starttime)
  return p != NULL ? *p : *reinterpret_cast<const ::HIK_SDK_P::Time*>(
      &::HIK_SDK_P::_Time_default_instance_);
}
inline ::HIK_SDK_P::Time* SaveFileParam::release_starttime() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.SaveFileParam.starttime)
  
  ::HIK_SDK_P::Time* temp = starttime_;
  starttime_ = NULL;
  return temp;
}
inline ::HIK_SDK_P::Time* SaveFileParam::mutable_starttime() {
  
  if (starttime_ == NULL) {
    auto* p = CreateMaybeMessage<::HIK_SDK_P::Time>(GetArenaNoVirtual());
    starttime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.SaveFileParam.starttime)
  return starttime_;
}
inline void SaveFileParam::set_allocated_starttime(::HIK_SDK_P::Time* starttime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete starttime_;
  }
  if (starttime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      starttime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.SaveFileParam.starttime)
}

// .HIK_SDK_P.Time stoptime = 2;
inline bool SaveFileParam::has_stoptime() const {
  return this != internal_default_instance() && stoptime_ != NULL;
}
inline void SaveFileParam::clear_stoptime() {
  if (GetArenaNoVirtual() == NULL && stoptime_ != NULL) {
    delete stoptime_;
  }
  stoptime_ = NULL;
}
inline const ::HIK_SDK_P::Time& SaveFileParam::_internal_stoptime() const {
  return *stoptime_;
}
inline const ::HIK_SDK_P::Time& SaveFileParam::stoptime() const {
  const ::HIK_SDK_P::Time* p = stoptime_;
  // @@protoc_insertion_point(field_get:HIK_SDK_P.SaveFileParam.stoptime)
  return p != NULL ? *p : *reinterpret_cast<const ::HIK_SDK_P::Time*>(
      &::HIK_SDK_P::_Time_default_instance_);
}
inline ::HIK_SDK_P::Time* SaveFileParam::release_stoptime() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.SaveFileParam.stoptime)
  
  ::HIK_SDK_P::Time* temp = stoptime_;
  stoptime_ = NULL;
  return temp;
}
inline ::HIK_SDK_P::Time* SaveFileParam::mutable_stoptime() {
  
  if (stoptime_ == NULL) {
    auto* p = CreateMaybeMessage<::HIK_SDK_P::Time>(GetArenaNoVirtual());
    stoptime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.SaveFileParam.stoptime)
  return stoptime_;
}
inline void SaveFileParam::set_allocated_stoptime(::HIK_SDK_P::Time* stoptime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stoptime_;
  }
  if (stoptime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stoptime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stoptime, submessage_arena);
    }
    
  } else {
    
  }
  stoptime_ = stoptime;
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.SaveFileParam.stoptime)
}

// int64 channel = 3;
inline void SaveFileParam::clear_channel() {
  channel_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SaveFileParam::channel() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.SaveFileParam.channel)
  return channel_;
}
inline void SaveFileParam::set_channel(::google::protobuf::int64 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.SaveFileParam.channel)
}

// string filename = 4;
inline void SaveFileParam::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveFileParam::filename() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.SaveFileParam.filename)
  return filename_.GetNoArena();
}
inline void SaveFileParam::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.SaveFileParam.filename)
}
#if LANG_CXX11
inline void SaveFileParam::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.SaveFileParam.filename)
}
#endif
inline void SaveFileParam::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.SaveFileParam.filename)
}
inline void SaveFileParam::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.SaveFileParam.filename)
}
inline ::std::string* SaveFileParam::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.SaveFileParam.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveFileParam::release_filename() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.SaveFileParam.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveFileParam::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.SaveFileParam.filename)
}

// -------------------------------------------------------------------

// SaveFileParam1

// string nvrfile = 1;
inline void SaveFileParam1::clear_nvrfile() {
  nvrfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveFileParam1::nvrfile() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.SaveFileParam1.nvrfile)
  return nvrfile_.GetNoArena();
}
inline void SaveFileParam1::set_nvrfile(const ::std::string& value) {
  
  nvrfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.SaveFileParam1.nvrfile)
}
#if LANG_CXX11
inline void SaveFileParam1::set_nvrfile(::std::string&& value) {
  
  nvrfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.SaveFileParam1.nvrfile)
}
#endif
inline void SaveFileParam1::set_nvrfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nvrfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.SaveFileParam1.nvrfile)
}
inline void SaveFileParam1::set_nvrfile(const char* value, size_t size) {
  
  nvrfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.SaveFileParam1.nvrfile)
}
inline ::std::string* SaveFileParam1::mutable_nvrfile() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.SaveFileParam1.nvrfile)
  return nvrfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveFileParam1::release_nvrfile() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.SaveFileParam1.nvrfile)
  
  return nvrfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveFileParam1::set_allocated_nvrfile(::std::string* nvrfile) {
  if (nvrfile != NULL) {
    
  } else {
    
  }
  nvrfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nvrfile);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.SaveFileParam1.nvrfile)
}

// string desfile = 2;
inline void SaveFileParam1::clear_desfile() {
  desfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveFileParam1::desfile() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.SaveFileParam1.desfile)
  return desfile_.GetNoArena();
}
inline void SaveFileParam1::set_desfile(const ::std::string& value) {
  
  desfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.SaveFileParam1.desfile)
}
#if LANG_CXX11
inline void SaveFileParam1::set_desfile(::std::string&& value) {
  
  desfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.SaveFileParam1.desfile)
}
#endif
inline void SaveFileParam1::set_desfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.SaveFileParam1.desfile)
}
inline void SaveFileParam1::set_desfile(const char* value, size_t size) {
  
  desfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.SaveFileParam1.desfile)
}
inline ::std::string* SaveFileParam1::mutable_desfile() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.SaveFileParam1.desfile)
  return desfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveFileParam1::release_desfile() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.SaveFileParam1.desfile)
  
  return desfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveFileParam1::set_allocated_desfile(::std::string* desfile) {
  if (desfile != NULL) {
    
  } else {
    
  }
  desfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desfile);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.SaveFileParam1.desfile)
}

// -------------------------------------------------------------------

// FileData

// string filename = 1;
inline void FileData::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileData::filename() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.FileData.filename)
  return filename_.GetNoArena();
}
inline void FileData::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.FileData.filename)
}
#if LANG_CXX11
inline void FileData::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.FileData.filename)
}
#endif
inline void FileData::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.FileData.filename)
}
inline void FileData::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.FileData.filename)
}
inline ::std::string* FileData::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.FileData.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileData::release_filename() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.FileData.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileData::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.FileData.filename)
}

// .HIK_SDK_P.Time starttime = 2;
inline bool FileData::has_starttime() const {
  return this != internal_default_instance() && starttime_ != NULL;
}
inline void FileData::clear_starttime() {
  if (GetArenaNoVirtual() == NULL && starttime_ != NULL) {
    delete starttime_;
  }
  starttime_ = NULL;
}
inline const ::HIK_SDK_P::Time& FileData::_internal_starttime() const {
  return *starttime_;
}
inline const ::HIK_SDK_P::Time& FileData::starttime() const {
  const ::HIK_SDK_P::Time* p = starttime_;
  // @@protoc_insertion_point(field_get:HIK_SDK_P.FileData.starttime)
  return p != NULL ? *p : *reinterpret_cast<const ::HIK_SDK_P::Time*>(
      &::HIK_SDK_P::_Time_default_instance_);
}
inline ::HIK_SDK_P::Time* FileData::release_starttime() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.FileData.starttime)
  
  ::HIK_SDK_P::Time* temp = starttime_;
  starttime_ = NULL;
  return temp;
}
inline ::HIK_SDK_P::Time* FileData::mutable_starttime() {
  
  if (starttime_ == NULL) {
    auto* p = CreateMaybeMessage<::HIK_SDK_P::Time>(GetArenaNoVirtual());
    starttime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.FileData.starttime)
  return starttime_;
}
inline void FileData::set_allocated_starttime(::HIK_SDK_P::Time* starttime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete starttime_;
  }
  if (starttime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      starttime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.FileData.starttime)
}

// .HIK_SDK_P.Time stoptime = 3;
inline bool FileData::has_stoptime() const {
  return this != internal_default_instance() && stoptime_ != NULL;
}
inline void FileData::clear_stoptime() {
  if (GetArenaNoVirtual() == NULL && stoptime_ != NULL) {
    delete stoptime_;
  }
  stoptime_ = NULL;
}
inline const ::HIK_SDK_P::Time& FileData::_internal_stoptime() const {
  return *stoptime_;
}
inline const ::HIK_SDK_P::Time& FileData::stoptime() const {
  const ::HIK_SDK_P::Time* p = stoptime_;
  // @@protoc_insertion_point(field_get:HIK_SDK_P.FileData.stoptime)
  return p != NULL ? *p : *reinterpret_cast<const ::HIK_SDK_P::Time*>(
      &::HIK_SDK_P::_Time_default_instance_);
}
inline ::HIK_SDK_P::Time* FileData::release_stoptime() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.FileData.stoptime)
  
  ::HIK_SDK_P::Time* temp = stoptime_;
  stoptime_ = NULL;
  return temp;
}
inline ::HIK_SDK_P::Time* FileData::mutable_stoptime() {
  
  if (stoptime_ == NULL) {
    auto* p = CreateMaybeMessage<::HIK_SDK_P::Time>(GetArenaNoVirtual());
    stoptime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.FileData.stoptime)
  return stoptime_;
}
inline void FileData::set_allocated_stoptime(::HIK_SDK_P::Time* stoptime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stoptime_;
  }
  if (stoptime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stoptime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stoptime, submessage_arena);
    }
    
  } else {
    
  }
  stoptime_ = stoptime;
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.FileData.stoptime)
}

// int64 filesize = 4;
inline void FileData::clear_filesize() {
  filesize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileData::filesize() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.FileData.filesize)
  return filesize_;
}
inline void FileData::set_filesize(::google::protobuf::int64 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.FileData.filesize)
}

// int32 err = 5;
inline void FileData::clear_err() {
  err_ = 0;
}
inline ::google::protobuf::int32 FileData::err() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.FileData.err)
  return err_;
}
inline void FileData::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.FileData.err)
}

// -------------------------------------------------------------------

// FindFileParam

// .HIK_SDK_P.Time starttime = 1;
inline bool FindFileParam::has_starttime() const {
  return this != internal_default_instance() && starttime_ != NULL;
}
inline void FindFileParam::clear_starttime() {
  if (GetArenaNoVirtual() == NULL && starttime_ != NULL) {
    delete starttime_;
  }
  starttime_ = NULL;
}
inline const ::HIK_SDK_P::Time& FindFileParam::_internal_starttime() const {
  return *starttime_;
}
inline const ::HIK_SDK_P::Time& FindFileParam::starttime() const {
  const ::HIK_SDK_P::Time* p = starttime_;
  // @@protoc_insertion_point(field_get:HIK_SDK_P.FindFileParam.starttime)
  return p != NULL ? *p : *reinterpret_cast<const ::HIK_SDK_P::Time*>(
      &::HIK_SDK_P::_Time_default_instance_);
}
inline ::HIK_SDK_P::Time* FindFileParam::release_starttime() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.FindFileParam.starttime)
  
  ::HIK_SDK_P::Time* temp = starttime_;
  starttime_ = NULL;
  return temp;
}
inline ::HIK_SDK_P::Time* FindFileParam::mutable_starttime() {
  
  if (starttime_ == NULL) {
    auto* p = CreateMaybeMessage<::HIK_SDK_P::Time>(GetArenaNoVirtual());
    starttime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.FindFileParam.starttime)
  return starttime_;
}
inline void FindFileParam::set_allocated_starttime(::HIK_SDK_P::Time* starttime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete starttime_;
  }
  if (starttime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      starttime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.FindFileParam.starttime)
}

// .HIK_SDK_P.Time stoptime = 2;
inline bool FindFileParam::has_stoptime() const {
  return this != internal_default_instance() && stoptime_ != NULL;
}
inline void FindFileParam::clear_stoptime() {
  if (GetArenaNoVirtual() == NULL && stoptime_ != NULL) {
    delete stoptime_;
  }
  stoptime_ = NULL;
}
inline const ::HIK_SDK_P::Time& FindFileParam::_internal_stoptime() const {
  return *stoptime_;
}
inline const ::HIK_SDK_P::Time& FindFileParam::stoptime() const {
  const ::HIK_SDK_P::Time* p = stoptime_;
  // @@protoc_insertion_point(field_get:HIK_SDK_P.FindFileParam.stoptime)
  return p != NULL ? *p : *reinterpret_cast<const ::HIK_SDK_P::Time*>(
      &::HIK_SDK_P::_Time_default_instance_);
}
inline ::HIK_SDK_P::Time* FindFileParam::release_stoptime() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.FindFileParam.stoptime)
  
  ::HIK_SDK_P::Time* temp = stoptime_;
  stoptime_ = NULL;
  return temp;
}
inline ::HIK_SDK_P::Time* FindFileParam::mutable_stoptime() {
  
  if (stoptime_ == NULL) {
    auto* p = CreateMaybeMessage<::HIK_SDK_P::Time>(GetArenaNoVirtual());
    stoptime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.FindFileParam.stoptime)
  return stoptime_;
}
inline void FindFileParam::set_allocated_stoptime(::HIK_SDK_P::Time* stoptime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stoptime_;
  }
  if (stoptime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stoptime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stoptime, submessage_arena);
    }
    
  } else {
    
  }
  stoptime_ = stoptime;
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.FindFileParam.stoptime)
}

// uint64 channel = 3;
inline void FindFileParam::clear_channel() {
  channel_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FindFileParam::channel() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.FindFileParam.channel)
  return channel_;
}
inline void FindFileParam::set_channel(::google::protobuf::uint64 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.FindFileParam.channel)
}

// -------------------------------------------------------------------

// Access

// string accesskey = 1;
inline void Access::clear_accesskey() {
  accesskey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::accesskey() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Access.accesskey)
  return accesskey_.GetNoArena();
}
inline void Access::set_accesskey(const ::std::string& value) {
  
  accesskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Access.accesskey)
}
#if LANG_CXX11
inline void Access::set_accesskey(::std::string&& value) {
  
  accesskey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.Access.accesskey)
}
#endif
inline void Access::set_accesskey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accesskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.Access.accesskey)
}
inline void Access::set_accesskey(const char* value, size_t size) {
  
  accesskey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.Access.accesskey)
}
inline ::std::string* Access::mutable_accesskey() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.Access.accesskey)
  return accesskey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_accesskey() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.Access.accesskey)
  
  return accesskey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_accesskey(::std::string* accesskey) {
  if (accesskey != NULL) {
    
  } else {
    
  }
  accesskey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesskey);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.Access.accesskey)
}

// string accesskeySecret = 2;
inline void Access::clear_accesskeysecret() {
  accesskeysecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::accesskeysecret() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Access.accesskeySecret)
  return accesskeysecret_.GetNoArena();
}
inline void Access::set_accesskeysecret(const ::std::string& value) {
  
  accesskeysecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Access.accesskeySecret)
}
#if LANG_CXX11
inline void Access::set_accesskeysecret(::std::string&& value) {
  
  accesskeysecret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.Access.accesskeySecret)
}
#endif
inline void Access::set_accesskeysecret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accesskeysecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.Access.accesskeySecret)
}
inline void Access::set_accesskeysecret(const char* value, size_t size) {
  
  accesskeysecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.Access.accesskeySecret)
}
inline ::std::string* Access::mutable_accesskeysecret() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.Access.accesskeySecret)
  return accesskeysecret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_accesskeysecret() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.Access.accesskeySecret)
  
  return accesskeysecret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_accesskeysecret(::std::string* accesskeysecret) {
  if (accesskeysecret != NULL) {
    
  } else {
    
  }
  accesskeysecret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesskeysecret);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.Access.accesskeySecret)
}

// string regionId = 3;
inline void Access::clear_regionid() {
  regionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Access::regionid() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.Access.regionId)
  return regionid_.GetNoArena();
}
inline void Access::set_regionid(const ::std::string& value) {
  
  regionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.Access.regionId)
}
#if LANG_CXX11
inline void Access::set_regionid(::std::string&& value) {
  
  regionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.Access.regionId)
}
#endif
inline void Access::set_regionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  regionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.Access.regionId)
}
inline void Access::set_regionid(const char* value, size_t size) {
  
  regionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.Access.regionId)
}
inline ::std::string* Access::mutable_regionid() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.Access.regionId)
  return regionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Access::release_regionid() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.Access.regionId)
  
  return regionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Access::set_allocated_regionid(::std::string* regionid) {
  if (regionid != NULL) {
    
  } else {
    
  }
  regionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regionid);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.Access.regionId)
}

// -------------------------------------------------------------------

// UplodParam

// .HIK_SDK_P.Access access = 1;
inline bool UplodParam::has_access() const {
  return this != internal_default_instance() && access_ != NULL;
}
inline void UplodParam::clear_access() {
  if (GetArenaNoVirtual() == NULL && access_ != NULL) {
    delete access_;
  }
  access_ = NULL;
}
inline const ::HIK_SDK_P::Access& UplodParam::_internal_access() const {
  return *access_;
}
inline const ::HIK_SDK_P::Access& UplodParam::access() const {
  const ::HIK_SDK_P::Access* p = access_;
  // @@protoc_insertion_point(field_get:HIK_SDK_P.UplodParam.access)
  return p != NULL ? *p : *reinterpret_cast<const ::HIK_SDK_P::Access*>(
      &::HIK_SDK_P::_Access_default_instance_);
}
inline ::HIK_SDK_P::Access* UplodParam::release_access() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.UplodParam.access)
  
  ::HIK_SDK_P::Access* temp = access_;
  access_ = NULL;
  return temp;
}
inline ::HIK_SDK_P::Access* UplodParam::mutable_access() {
  
  if (access_ == NULL) {
    auto* p = CreateMaybeMessage<::HIK_SDK_P::Access>(GetArenaNoVirtual());
    access_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.UplodParam.access)
  return access_;
}
inline void UplodParam::set_allocated_access(::HIK_SDK_P::Access* access) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete access_;
  }
  if (access) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      access = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    
  } else {
    
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.UplodParam.access)
}

// string filename = 2;
inline void UplodParam::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UplodParam::filename() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.UplodParam.filename)
  return filename_.GetNoArena();
}
inline void UplodParam::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.UplodParam.filename)
}
#if LANG_CXX11
inline void UplodParam::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.UplodParam.filename)
}
#endif
inline void UplodParam::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.UplodParam.filename)
}
inline void UplodParam::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.UplodParam.filename)
}
inline ::std::string* UplodParam::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.UplodParam.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UplodParam::release_filename() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.UplodParam.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UplodParam::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.UplodParam.filename)
}

// string videoTitle = 3;
inline void UplodParam::clear_videotitle() {
  videotitle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UplodParam::videotitle() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.UplodParam.videoTitle)
  return videotitle_.GetNoArena();
}
inline void UplodParam::set_videotitle(const ::std::string& value) {
  
  videotitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.UplodParam.videoTitle)
}
#if LANG_CXX11
inline void UplodParam::set_videotitle(::std::string&& value) {
  
  videotitle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.UplodParam.videoTitle)
}
#endif
inline void UplodParam::set_videotitle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  videotitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.UplodParam.videoTitle)
}
inline void UplodParam::set_videotitle(const char* value, size_t size) {
  
  videotitle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.UplodParam.videoTitle)
}
inline ::std::string* UplodParam::mutable_videotitle() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.UplodParam.videoTitle)
  return videotitle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UplodParam::release_videotitle() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.UplodParam.videoTitle)
  
  return videotitle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UplodParam::set_allocated_videotitle(::std::string* videotitle) {
  if (videotitle != NULL) {
    
  } else {
    
  }
  videotitle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videotitle);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.UplodParam.videoTitle)
}

// -------------------------------------------------------------------

// VideoId

// int32 err = 1;
inline void VideoId::clear_err() {
  err_ = 0;
}
inline ::google::protobuf::int32 VideoId::err() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.VideoId.err)
  return err_;
}
inline void VideoId::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.VideoId.err)
}

// string videoId = 2;
inline void VideoId::clear_videoid() {
  videoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoId::videoid() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.VideoId.videoId)
  return videoid_.GetNoArena();
}
inline void VideoId::set_videoid(const ::std::string& value) {
  
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.VideoId.videoId)
}
#if LANG_CXX11
inline void VideoId::set_videoid(::std::string&& value) {
  
  videoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.VideoId.videoId)
}
#endif
inline void VideoId::set_videoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.VideoId.videoId)
}
inline void VideoId::set_videoid(const char* value, size_t size) {
  
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.VideoId.videoId)
}
inline ::std::string* VideoId::mutable_videoid() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.VideoId.videoId)
  return videoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoId::release_videoid() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.VideoId.videoId)
  
  return videoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoId::set_allocated_videoid(::std::string* videoid) {
  if (videoid != NULL) {
    
  } else {
    
  }
  videoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videoid);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.VideoId.videoId)
}

// -------------------------------------------------------------------

// VideoIdParam

// .HIK_SDK_P.Access access = 1;
inline bool VideoIdParam::has_access() const {
  return this != internal_default_instance() && access_ != NULL;
}
inline void VideoIdParam::clear_access() {
  if (GetArenaNoVirtual() == NULL && access_ != NULL) {
    delete access_;
  }
  access_ = NULL;
}
inline const ::HIK_SDK_P::Access& VideoIdParam::_internal_access() const {
  return *access_;
}
inline const ::HIK_SDK_P::Access& VideoIdParam::access() const {
  const ::HIK_SDK_P::Access* p = access_;
  // @@protoc_insertion_point(field_get:HIK_SDK_P.VideoIdParam.access)
  return p != NULL ? *p : *reinterpret_cast<const ::HIK_SDK_P::Access*>(
      &::HIK_SDK_P::_Access_default_instance_);
}
inline ::HIK_SDK_P::Access* VideoIdParam::release_access() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.VideoIdParam.access)
  
  ::HIK_SDK_P::Access* temp = access_;
  access_ = NULL;
  return temp;
}
inline ::HIK_SDK_P::Access* VideoIdParam::mutable_access() {
  
  if (access_ == NULL) {
    auto* p = CreateMaybeMessage<::HIK_SDK_P::Access>(GetArenaNoVirtual());
    access_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.VideoIdParam.access)
  return access_;
}
inline void VideoIdParam::set_allocated_access(::HIK_SDK_P::Access* access) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete access_;
  }
  if (access) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      access = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    
  } else {
    
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.VideoIdParam.access)
}

// string videoId = 2;
inline void VideoIdParam::clear_videoid() {
  videoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoIdParam::videoid() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.VideoIdParam.videoId)
  return videoid_.GetNoArena();
}
inline void VideoIdParam::set_videoid(const ::std::string& value) {
  
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.VideoIdParam.videoId)
}
#if LANG_CXX11
inline void VideoIdParam::set_videoid(::std::string&& value) {
  
  videoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.VideoIdParam.videoId)
}
#endif
inline void VideoIdParam::set_videoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.VideoIdParam.videoId)
}
inline void VideoIdParam::set_videoid(const char* value, size_t size) {
  
  videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.VideoIdParam.videoId)
}
inline ::std::string* VideoIdParam::mutable_videoid() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.VideoIdParam.videoId)
  return videoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoIdParam::release_videoid() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.VideoIdParam.videoId)
  
  return videoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoIdParam::set_allocated_videoid(::std::string* videoid) {
  if (videoid != NULL) {
    
  } else {
    
  }
  videoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), videoid);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.VideoIdParam.videoId)
}

// -------------------------------------------------------------------

// VideoURL

// int32 err = 1;
inline void VideoURL::clear_err() {
  err_ = 0;
}
inline ::google::protobuf::int32 VideoURL::err() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.VideoURL.err)
  return err_;
}
inline void VideoURL::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.VideoURL.err)
}

// string URL = 2;
inline void VideoURL::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoURL::url() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.VideoURL.URL)
  return url_.GetNoArena();
}
inline void VideoURL::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HIK_SDK_P.VideoURL.URL)
}
#if LANG_CXX11
inline void VideoURL::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HIK_SDK_P.VideoURL.URL)
}
#endif
inline void VideoURL::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HIK_SDK_P.VideoURL.URL)
}
inline void VideoURL::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HIK_SDK_P.VideoURL.URL)
}
inline ::std::string* VideoURL::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:HIK_SDK_P.VideoURL.URL)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoURL::release_url() {
  // @@protoc_insertion_point(field_release:HIK_SDK_P.VideoURL.URL)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoURL::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:HIK_SDK_P.VideoURL.URL)
}

// -------------------------------------------------------------------

// ErrCode

// int32 errcode = 1;
inline void ErrCode::clear_errcode() {
  errcode_ = 0;
}
inline ::google::protobuf::int32 ErrCode::errcode() const {
  // @@protoc_insertion_point(field_get:HIK_SDK_P.ErrCode.errcode)
  return errcode_;
}
inline void ErrCode::set_errcode(::google::protobuf::int32 value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:HIK_SDK_P.ErrCode.errcode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HIK_SDK_P

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_HIK_5fSDK_2eproto
